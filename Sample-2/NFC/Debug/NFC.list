
NFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c4  080040c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  0800413c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800413c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e29b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5f  00000000  00000000  0002e33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000300a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00030cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064f  00000000  00000000  00031818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec81  00000000  00000000  00051e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c23cf  00000000  00000000  00060ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  00122f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800401c 	.word	0x0800401c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800401c 	.word	0x0800401c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 faee 	bl	8000b6a <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f849 	bl	8000624 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f919 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8e7 	bl	8000768 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800059a:	f000 f8a5 	bl	80006e8 <MX_I2C1_Init>
  while (1)
  {
    uint8_t dataBuffer[32];  // Buffer to store the received data

    // Read data from NFC Click via I2C
    if (HAL_I2C_Master_Receive(&hi2c1, 0x28, dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY) == HAL_OK)
 800059e:	1d3a      	adds	r2, r7, #4
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2320      	movs	r3, #32
 80005a8:	2128      	movs	r1, #40	; 0x28
 80005aa:	481a      	ldr	r0, [pc, #104]	; (8000614 <main+0x90>)
 80005ac:	f000 fe6e 	bl	800128c <HAL_I2C_Master_Receive>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d128      	bne.n	8000608 <main+0x84>
    {
      // Print the received data to the serial monitor
      for (int i = 0; i < sizeof(dataBuffer); i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005ba:	e01b      	b.n	80005f4 <main+0x70>
      {
        char uartBuffer[8];  // Buffer to store the converted data

        // Convert the data to ASCII and print it
        sprintf(uartBuffer, "%02X ", dataBuffer[i]);
 80005bc:	1d3a      	adds	r2, r7, #4
 80005be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ca:	4913      	ldr	r1, [pc, #76]	; (8000618 <main+0x94>)
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f8b7 	bl	8003740 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80005d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fdfa 	bl	80001d0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <main+0x98>)
 80005ea:	f002 fc07 	bl	8002dfc <HAL_UART_Transmit>
      for (int i = 0; i < sizeof(dataBuffer); i++)
 80005ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f0:	3301      	adds	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005f6:	2b1f      	cmp	r3, #31
 80005f8:	d9e0      	bls.n	80005bc <main+0x38>
      }
      HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Print a new line
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fe:	2202      	movs	r2, #2
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <main+0x9c>)
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x98>)
 8000604:	f002 fbfa 	bl	8002dfc <HAL_UART_Transmit>
    }

    HAL_Delay(1000);  // Delay for 1 second between readings
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fb22 	bl	8000c54 <HAL_Delay>
  {
 8000610:	e7c5      	b.n	800059e <main+0x1a>
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c
 8000618:	08004034 	.word	0x08004034
 800061c:	200000e0 	.word	0x200000e0
 8000620:	0800403c 	.word	0x0800403c

08000624 <SystemClock_Config>:
  }
}

/*  System Clock Configuration  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b096      	sub	sp, #88	; 0x58
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2244      	movs	r2, #68	; 0x44
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 f87c 	bl	8003730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000646:	f44f 7000 	mov.w	r0, #512	; 0x200
 800064a:	f001 fa03 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000654:	f000 f902 	bl	800085c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000658:	f001 f9de 	bl	8001a18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <SystemClock_Config+0xc0>)
 800065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000662:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xc0>)
 8000664:	f023 0318 	bic.w	r3, r3, #24
 8000668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800066c:	2314      	movs	r3, #20
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800067c:	2360      	movs	r3, #96	; 0x60
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000684:	2301      	movs	r3, #1
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fa2d 	bl	8001b00 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006ac:	f000 f8d6 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2303      	movs	r3, #3
 80006b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	2101      	movs	r1, #1
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fe2d 	bl	8002328 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d4:	f000 f8c2 	bl	800085c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006d8:	f002 fa40 	bl	8002b5c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006dc:	bf00      	nop
 80006de:	3758      	adds	r7, #88	; 0x58
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_I2C1_Init>:

/** I2C1 Initialization Function */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_I2C1_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_I2C1_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_I2C1_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <MX_I2C1_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_I2C1_Init+0x74>)
 8000700:	2201      	movs	r2, #1
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <MX_I2C1_Init+0x74>)
 8000724:	f000 fd22 	bl	800116c <HAL_I2C_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800072e:	f000 f895 	bl	800085c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_I2C1_Init+0x74>)
 8000736:	f001 f8d7 	bl	80018e8 <HAL_I2CEx_ConfigAnalogFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000740:	f000 f88c 	bl	800085c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_I2C1_Init+0x74>)
 8000748:	f001 f919 	bl	800197e <HAL_I2CEx_ConfigDigitalFilter>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000752:	f000 f883 	bl	800085c <Error_Handler>
  }

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40005400 	.word	0x40005400
 8000764:	00707cbb 	.word	0x00707cbb

08000768 <MX_USART2_UART_Init>:

/* USART2 Initialization Function   */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800076e:	4a15      	ldr	r2, [pc, #84]	; (80007c4 <MX_USART2_UART_Init+0x5c>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x58>)
 80007ac:	f002 fad8 	bl	8002d60 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f851 	bl	800085c <Error_Handler>
  }

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000e0 	.word	0x200000e0
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:

/* GPIO Initialization Function   */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_GPIO_Init+0x8c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_GPIO_Init+0x8c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_GPIO_Init+0x8c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_GPIO_Init+0x8c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <MX_GPIO_Init+0x8c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <MX_GPIO_Init+0x8c>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <MX_GPIO_Init+0x90>)
 800082c:	f000 fc86 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000830:	2308      	movs	r3, #8
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_GPIO_Init+0x90>)
 8000848:	f000 fb0e 	bl	8000e68 <HAL_GPIO_Init>

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <Error_Handler>:

/* This function is executed in case of error occurrence */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_MspInit+0x44>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	; 0x60
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_MspInit+0x44>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_MspInit+0x44>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	; 0x58
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_MspInit+0x44>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09e      	sub	sp, #120	; 0x78
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2254      	movs	r2, #84	; 0x54
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ff2d 	bl	8003730 <memset>
  if(hi2c->Instance==I2C1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <HAL_I2C_MspInit+0xa8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d137      	bne.n	8000950 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 ff3f 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008f8:	f7ff ffb0 	bl	800085c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_I2C_MspInit+0xac>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_I2C_MspInit+0xac>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_I2C_MspInit+0xac>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000914:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000918:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	2312      	movs	r3, #18
 800091c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000926:	2304      	movs	r3, #4
 8000928:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f000 fa98 	bl	8000e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_I2C_MspInit+0xac>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_I2C_MspInit+0xac>)
 800093e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000942:	6593      	str	r3, [r2, #88]	; 0x58
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_I2C_MspInit+0xac>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3778      	adds	r7, #120	; 0x78
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40005400 	.word	0x40005400
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09e      	sub	sp, #120	; 0x78
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2254      	movs	r2, #84	; 0x54
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fed5 	bl	8003730 <memset>
  if(huart->Instance==USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <HAL_UART_MspInit+0xcc>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d148      	bne.n	8000a22 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000990:	2302      	movs	r3, #2
 8000992:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fee7 	bl	8002770 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a8:	f7ff ff58 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <HAL_UART_MspInit+0xd0>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <HAL_UART_MspInit+0xd0>)
 80009b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b6:	6593      	str	r3, [r2, #88]	; 0x58
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_UART_MspInit+0xd0>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_UART_MspInit+0xd0>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0xd0>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0xd0>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009dc:	2304      	movs	r3, #4
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ec:	2307      	movs	r3, #7
 80009ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f000 fa35 	bl	8000e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a10:	2303      	movs	r3, #3
 8000a12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fa23 	bl	8000e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3778      	adds	r7, #120	; 0x78
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40021000 	.word	0x40021000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8c8 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f002 fe10 	bl	80036dc <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20010000 	.word	0x20010000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	20000164 	.word	0x20000164
 8000af0:	20000180 	.word	0x20000180

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f002 fdcf 	bl	80036e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fd1b 	bl	8000584 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b5c:	080040cc 	.word	0x080040cc
  ldr r2, =_sbss
 8000b60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b64:	2000017c 	.word	0x2000017c

08000b68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_IRQHandler>

08000b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f943 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f80e 	bl	8000b9c <HAL_InitTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e001      	b.n	8000b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8c:	f7ff fe6c 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_InitTick+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d023      	beq.n	8000bf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_InitTick+0x70>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_InitTick+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f941 	bl	8000e4e <HAL_SYSTICK_Config>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10f      	bne.n	8000bf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d809      	bhi.n	8000bec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 f919 	bl	8000e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_InitTick+0x74>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e007      	b.n	8000bfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	e004      	b.n	8000bfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e001      	b.n	8000bfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000168 	.word	0x20000168

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000168 	.word	0x20000168

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff5c 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffb0 	bl	8000dbc <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e76:	e148      	b.n	800110a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 813a 	beq.w	8001104 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d005      	beq.n	8000ea8 <HAL_GPIO_Init+0x40>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d130      	bne.n	8000f0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	091b      	lsrs	r3, r3, #4
 8000ef4:	f003 0201 	and.w	r2, r3, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d017      	beq.n	8000f46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d123      	bne.n	8000f9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	08da      	lsrs	r2, r3, #3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3208      	adds	r2, #8
 8000f94:	6939      	ldr	r1, [r7, #16]
 8000f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0203 	and.w	r2, r3, #3
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8094 	beq.w	8001104 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fdc:	4b52      	ldr	r3, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x2c0>)
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	4a51      	ldr	r2, [pc, #324]	; (8001128 <HAL_GPIO_Init+0x2c0>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe8:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <HAL_GPIO_Init+0x2c0>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	; (800112c <HAL_GPIO_Init+0x2c4>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1d4>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a43      	ldr	r2, [pc, #268]	; (8001130 <HAL_GPIO_Init+0x2c8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1d0>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <HAL_GPIO_Init+0x2cc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1cc>
 8001030:	2302      	movs	r3, #2
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x1d6>
 8001034:	2307      	movs	r3, #7
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x1d6>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x1d6>
 800103c:	2300      	movs	r3, #0
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104e:	4937      	ldr	r1, [pc, #220]	; (800112c <HAL_GPIO_Init+0x2c4>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001080:	4a2d      	ldr	r2, [pc, #180]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_GPIO_Init+0x2d0>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	f47f aeaf 	bne.w	8000e78 <HAL_GPIO_Init+0x10>
  }
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	48000400 	.word	0x48000400
 8001134:	48000800 	.word	0x48000800
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e002      	b.n	8001160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e081      	b.n	8001282 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fb8c 	bl	80008b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2224      	movs	r2, #36	; 0x24
 800119c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e006      	b.n	80011f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d104      	bne.n	8001206 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69d9      	ldr	r1, [r3, #28]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2220      	movs	r2, #32
 800126e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af02      	add	r7, sp, #8
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	461a      	mov	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	817b      	strh	r3, [r7, #10]
 800129c:	4613      	mov	r3, r2
 800129e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	f040 80db 	bne.w	8001464 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_I2C_Master_Receive+0x30>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e0d4      	b.n	8001466 <HAL_I2C_Master_Receive+0x1da>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012c4:	f7ff fcba 	bl	8000c3c <HAL_GetTick>
 80012c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2319      	movs	r3, #25
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f8f2 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0bf      	b.n	8001466 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2222      	movs	r2, #34	; 0x22
 80012ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2210      	movs	r2, #16
 80012f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	893a      	ldrh	r2, [r7, #8]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001312:	b29b      	uxth	r3, r3
 8001314:	2bff      	cmp	r3, #255	; 0xff
 8001316:	d90e      	bls.n	8001336 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001322:	b2da      	uxtb	r2, r3
 8001324:	8979      	ldrh	r1, [r7, #10]
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_I2C_Master_Receive+0x1e4>)
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 faa8 	bl	8001884 <I2C_TransferConfig>
 8001334:	e06d      	b.n	8001412 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001344:	b2da      	uxtb	r2, r3
 8001346:	8979      	ldrh	r1, [r7, #10]
 8001348:	4b49      	ldr	r3, [pc, #292]	; (8001470 <HAL_I2C_Master_Receive+0x1e4>)
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 fa97 	bl	8001884 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001356:	e05c      	b.n	8001412 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	6a39      	ldr	r1, [r7, #32]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 f92b 	bl	80015b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e07c      	b.n	8001466 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d034      	beq.n	8001412 <HAL_I2C_Master_Receive+0x186>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d130      	bne.n	8001412 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	2200      	movs	r2, #0
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f880 	bl	80014c0 <I2C_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e04d      	b.n	8001466 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	2bff      	cmp	r3, #255	; 0xff
 80013d2:	d90e      	bls.n	80013f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	8979      	ldrh	r1, [r7, #10]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 fa4a 	bl	8001884 <I2C_TransferConfig>
 80013f0:	e00f      	b.n	8001412 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	b2da      	uxtb	r2, r3
 8001402:	8979      	ldrh	r1, [r7, #10]
 8001404:	2300      	movs	r3, #0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 fa39 	bl	8001884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001416:	b29b      	uxth	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d19d      	bne.n	8001358 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	6a39      	ldr	r1, [r7, #32]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f88d 	bl	8001540 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e01a      	b.n	8001466 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2220      	movs	r2, #32
 8001436:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6859      	ldr	r1, [r3, #4]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_I2C_Master_Receive+0x1e8>)
 8001444:	400b      	ands	r3, r1
 8001446:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2220      	movs	r2, #32
 800144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	e000      	b.n	8001466 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001464:	2302      	movs	r3, #2
  }
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	80002400 	.word	0x80002400
 8001474:	fe00e800 	.word	0xfe00e800

08001478 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b02      	cmp	r3, #2
 800148c:	d103      	bne.n	8001496 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2200      	movs	r2, #0
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d007      	beq.n	80014b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	619a      	str	r2, [r3, #24]
  }
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014d0:	e022      	b.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d8:	d01e      	beq.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014da:	f7ff fbaf 	bl	8000c3c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d302      	bcc.n	80014f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d113      	bne.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	f043 0220 	orr.w	r2, r3, #32
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e00f      	b.n	8001538 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4013      	ands	r3, r2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	429a      	cmp	r2, r3
 8001534:	d0cd      	beq.n	80014d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800154c:	e028      	b.n	80015a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f8aa 	bl	80016ac <I2C_IsErrorOccurred>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e026      	b.n	80015b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001562:	f7ff fb6b 	bl	8000c3c <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	429a      	cmp	r2, r3
 8001570:	d302      	bcc.n	8001578 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d113      	bne.n	80015a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	f043 0220 	orr.w	r2, r3, #32
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e007      	b.n	80015b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0320 	and.w	r3, r3, #32
 80015aa:	2b20      	cmp	r3, #32
 80015ac:	d1cf      	bne.n	800154e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015c4:	e064      	b.n	8001690 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f86e 	bl	80016ac <I2C_IsErrorOccurred>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e062      	b.n	80016a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d138      	bne.n	800165a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d105      	bne.n	8001602 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e04e      	b.n	80016a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b10      	cmp	r3, #16
 800160e:	d107      	bne.n	8001620 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2210      	movs	r2, #16
 8001616:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2204      	movs	r2, #4
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
 800161e:	e002      	b.n	8001626 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2220      	movs	r2, #32
 800162c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800163a:	400b      	ands	r3, r1
 800163c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e022      	b.n	80016a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7ff faef 	bl	8000c3c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e007      	b.n	80016a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b04      	cmp	r3, #4
 800169c:	d193      	bne.n	80015c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	fe00e800 	.word	0xfe00e800

080016ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d075      	beq.n	80017c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2210      	movs	r2, #16
 80016de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016e0:	e056      	b.n	8001790 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e8:	d052      	beq.n	8001790 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016ea:	f7ff faa7 	bl	8000c3c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d302      	bcc.n	8001700 <I2C_IsErrorOccurred+0x54>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d147      	bne.n	8001790 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001712:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800171e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001722:	d12e      	bne.n	8001782 <I2C_IsErrorOccurred+0xd6>
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800172a:	d02a      	beq.n	8001782 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	2b20      	cmp	r3, #32
 8001730:	d027      	beq.n	8001782 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001740:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001742:	f7ff fa7b 	bl	8000c3c <HAL_GetTick>
 8001746:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001748:	e01b      	b.n	8001782 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800174a:	f7ff fa77 	bl	8000c3c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b19      	cmp	r3, #25
 8001756:	d914      	bls.n	8001782 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f043 0220 	orr.w	r2, r3, #32
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b20      	cmp	r3, #32
 800178e:	d1dc      	bne.n	800174a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	2b20      	cmp	r3, #32
 800179c:	d003      	beq.n	80017a6 <I2C_IsErrorOccurred+0xfa>
 800179e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d09d      	beq.n	80016e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80017a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2220      	movs	r2, #32
 80017b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01c      	beq.n	8001874 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f7ff fe1c 	bl	8001478 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6859      	ldr	r1, [r3, #4]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <I2C_IsErrorOccurred+0x1d4>)
 800184c:	400b      	ands	r3, r1
 800184e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001878:	4618      	mov	r0, r3
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	fe00e800 	.word	0xfe00e800

08001884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	817b      	strh	r3, [r7, #10]
 8001892:	4613      	mov	r3, r2
 8001894:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001896:	897b      	ldrh	r3, [r7, #10]
 8001898:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800189c:	7a7b      	ldrb	r3, [r7, #9]
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	0d5b      	lsrs	r3, r3, #21
 80018be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <I2C_TransferConfig+0x60>)
 80018c4:	430b      	orrs	r3, r1
 80018c6:	43db      	mvns	r3, r3
 80018c8:	ea02 0103 	and.w	r1, r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018d6:	bf00      	nop
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	03ff63ff 	.word	0x03ff63ff

080018e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d138      	bne.n	8001970 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001908:	2302      	movs	r3, #2
 800190a:	e032      	b.n	8001972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800193a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	e000      	b.n	8001972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001970:	2302      	movs	r3, #2
  }
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b20      	cmp	r3, #32
 8001992:	d139      	bne.n	8001a08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800199e:	2302      	movs	r3, #2
 80019a0:	e033      	b.n	8001a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2224      	movs	r2, #36	; 0x24
 80019ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000

08001a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a62:	d130      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d038      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2232      	movs	r2, #50	; 0x32
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a98:	e002      	b.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	d102      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f2      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac0:	d110      	bne.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e00f      	b.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d007      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001adc:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000
 8001af8:	20000000 	.word	0x20000000
 8001afc:	431bde83 	.word	0x431bde83

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f000 bc02 	b.w	8002318 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b14:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1e:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80e4 	beq.w	8001cfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4c>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	f040 808b 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	f040 8087 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4c:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x64>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e3d9      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	4b81      	ldr	r3, [pc, #516]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_RCC_OscConfig+0x7e>
 8001b74:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_OscConfig+0x8a>
 8001b7e:	4b7c      	ldr	r3, [pc, #496]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d223      	bcs.n	8001bd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd8c 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3ba      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a72      	ldr	r2, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	496d      	ldr	r1, [pc, #436]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4968      	ldr	r1, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e025      	b.n	8001c22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4960      	ldr	r1, [pc, #384]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	495b      	ldr	r1, [pc, #364]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd4c 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e37a      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c22:	f000 fc81 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4950      	ldr	r1, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_RCC_OscConfig+0x278>)
 8001c40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c42:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ffa8 	bl	8000b9c <HAL_InitTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d052      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	e35e      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe ffe5 	bl	8000c3c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7fe ffe1 	bl	8000c3c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e347      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4930      	ldr	r1, [pc, #192]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ffb2 	bl	8000c3c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7fe ffae 	bl	8000c3c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e314      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1dc>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d073      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x21c>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d10e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d063      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d15f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e2f1      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x24c>
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e025      	b.n	8001d98 <HAL_RCC_OscConfig+0x298>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d114      	bne.n	8001d80 <HAL_RCC_OscConfig+0x280>
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a02      	ldr	r2, [pc, #8]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e013      	b.n	8001d98 <HAL_RCC_OscConfig+0x298>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08004040 	.word	0x08004040
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	4ba0      	ldr	r3, [pc, #640]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a9f      	ldr	r2, [pc, #636]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b9d      	ldr	r3, [pc, #628]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a9c      	ldr	r2, [pc, #624]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe ff4c 	bl	8000c3c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7fe ff48 	bl	8000c3c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2ae      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4b92      	ldr	r3, [pc, #584]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2a8>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff38 	bl	8000c3c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7fe ff34 	bl	8000c3c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e29a      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2d0>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d060      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x310>
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d116      	bne.n	8001e3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	4b7c      	ldr	r3, [pc, #496]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x328>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e277      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	4973      	ldr	r1, [pc, #460]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	e040      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e46:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6e      	ldr	r2, [pc, #440]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe fef3 	bl	8000c3c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7fe feef 	bl	8000c3c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e255      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	495f      	ldr	r1, [pc, #380]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5c      	ldr	r2, [pc, #368]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fecf 	bl	8000c3c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7fe fecb 	bl	8000c3c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e231      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	4a4a      	ldr	r2, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7fe feaa 	bl	8000c3c <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7fe fea6 	bl	8000c3c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e20c      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x3ec>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f14:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fe8d 	bl	8000c3c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7fe fe89 	bl	8000c3c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1ef      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a6 	beq.w	80020a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_OscConfig+0x508>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d118      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCC_OscConfig+0x508>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x508>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fe50 	bl	8000c3c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7fe fe4c 	bl	8000c3c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1b2      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_RCC_OscConfig+0x508>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4d8>
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd6:	e029      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d115      	bne.n	800200c <HAL_RCC_OscConfig+0x50c>
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a03      	ldr	r2, [pc, #12]	; (8002004 <HAL_RCC_OscConfig+0x504>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002000:	e014      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	4b9a      	ldr	r3, [pc, #616]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	4a99      	ldr	r2, [pc, #612]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201c:	4b96      	ldr	r3, [pc, #600]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a95      	ldr	r2, [pc, #596]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d016      	beq.n	8002062 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe fe02 	bl	8000c3c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe fdfe 	bl	8000c3c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e162      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ed      	beq.n	800203c <HAL_RCC_OscConfig+0x53c>
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7fe fdeb 	bl	8000c3c <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fde7 	bl	8000c3c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	; 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e14b      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002080:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ed      	bne.n	800206a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	4b78      	ldr	r3, [pc, #480]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	4a77      	ldr	r2, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 800209a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03c      	beq.n	8002126 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01c      	beq.n	80020ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b4:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80020b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fdba 	bl	8000c3c <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020cc:	f7fe fdb6 	bl	8000c3c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e11c      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020de:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80020e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ef      	beq.n	80020cc <HAL_RCC_OscConfig+0x5cc>
 80020ec:	e01b      	b.n	8002126 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80020f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f4:	4a60      	ldr	r2, [pc, #384]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7fe fd9d 	bl	8000c3c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002106:	f7fe fd99 	bl	8000c3c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e0ff      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 800211a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ef      	bne.n	8002106 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80f3 	beq.w	8002316 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	2b02      	cmp	r3, #2
 8002136:	f040 80c9 	bne.w	80022cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800213a:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0203 	and.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	429a      	cmp	r2, r3
 800214c:	d12c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	3b01      	subs	r3, #1
 800215a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d123      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d11b      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d113      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d109      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d06b      	beq.n	8002280 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d062      	beq.n	8002274 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0ac      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2d      	ldr	r2, [pc, #180]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80021c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ca:	f7fe fd37 	bl	8000c3c <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe fd33 	bl	8000c3c <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e099      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <HAL_RCC_OscConfig+0x77c>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002200:	3a01      	subs	r2, #1
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220a:	0212      	lsls	r2, r2, #8
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002212:	0852      	lsrs	r2, r2, #1
 8002214:	3a01      	subs	r2, #1
 8002216:	0552      	lsls	r2, r2, #21
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0652      	lsls	r2, r2, #25
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800222a:	06d2      	lsls	r2, r2, #27
 800222c:	430a      	orrs	r2, r1
 800222e:	4912      	ldr	r1, [pc, #72]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224c:	f7fe fcf6 	bl	8000c3c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fcf2 	bl	8000c3c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e058      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_RCC_OscConfig+0x778>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002272:	e050      	b.n	8002316 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04f      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
 8002278:	40021000 	.word	0x40021000
 800227c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d144      	bne.n	8002316 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002296:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a4:	f7fe fcca 	bl	8000c3c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fcc6 	bl	8000c3c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e02c      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x7ac>
 80022ca:	e024      	b.n	8002316 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d01f      	beq.n	8002312 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 80022d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fcad 	bl	8000c3c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fca9 	bl	8000c3c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e00f      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	4905      	ldr	r1, [pc, #20]	; (8002320 <HAL_RCC_OscConfig+0x820>)
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_OscConfig+0x824>)
 800230c:	4013      	ands	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
 8002310:	e001      	b.n	8002316 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	feeefffc 	.word	0xfeeefffc

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0e7      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d910      	bls.n	800236c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b72      	ldr	r3, [pc, #456]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4970      	ldr	r1, [pc, #448]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cf      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	429a      	cmp	r2, r3
 8002386:	d908      	bls.n	800239a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4960      	ldr	r1, [pc, #384]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d04c      	beq.n	8002440 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d121      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0a6      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d115      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e09a      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023de:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e08e      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e086      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4943      	ldr	r1, [pc, #268]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f7fe fc14 	bl	8000c3c <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fc10 	bl	8000c3c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e06e      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002458:	429a      	cmp	r2, r3
 800245a:	d208      	bcs.n	800246e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	492b      	ldr	r1, [pc, #172]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d210      	bcs.n	800249e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0207 	bic.w	r2, r3, #7
 8002484:	4923      	ldr	r1, [pc, #140]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_ClockConfig+0x1ec>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e036      	b.n	800250c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4918      	ldr	r1, [pc, #96]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4910      	ldr	r1, [pc, #64]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024dc:	f000 f824 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	490b      	ldr	r1, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1f4>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1f8>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1fc>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fb4b 	bl	8000b9c <HAL_InitTick>
 8002506:	4603      	mov	r3, r0
 8002508:	72fb      	strb	r3, [r7, #11]

  return status;
 800250a:	7afb      	ldrb	r3, [r7, #11]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40022000 	.word	0x40022000
 8002518:	40021000 	.word	0x40021000
 800251c:	08004040 	.word	0x08004040
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x34>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d121      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d11e      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e005      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10d      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	e004      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_RCC_GetSysClockFreq+0x114>)
 80025ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d134      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025b6:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0xa6>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xac>
 80025cc:	e005      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_RCC_GetSysClockFreq+0x110>)
 80025d0:	617b      	str	r3, [r7, #20]
      break;
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_GetSysClockFreq+0x114>)
 80025d6:	617b      	str	r3, [r7, #20]
      break;
 80025d8:	e002      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	617b      	str	r3, [r7, #20]
      break;
 80025de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	3301      	adds	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	0e5b      	lsrs	r3, r3, #25
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	3301      	adds	r3, #1
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002620:	69bb      	ldr	r3, [r7, #24]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	08004058 	.word	0x08004058
 8002638:	00f42400 	.word	0x00f42400
 800263c:	007a1200 	.word	0x007a1200

08002640 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <HAL_RCC_GetHCLKFreq+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000000 	.word	0x20000000

08002658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800265c:	f7ff fff0 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4904      	ldr	r1, [pc, #16]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002678:	4618      	mov	r0, r3
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	08004050 	.word	0x08004050

08002684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002688:	f7ff ffda 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0adb      	lsrs	r3, r3, #11
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4904      	ldr	r1, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	08004050 	.word	0x08004050

080026b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026c8:	f7ff f9b6 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 80026cc:	6178      	str	r0, [r7, #20]
 80026ce:	e014      	b.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	6593      	str	r3, [r2, #88]	; 0x58
 80026dc:	4b22      	ldr	r3, [pc, #136]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f9a6 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 80026ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002700:	d10b      	bne.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b80      	cmp	r3, #128	; 0x80
 8002706:	d919      	bls.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2ba0      	cmp	r3, #160	; 0xa0
 800270c:	d902      	bls.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800270e:	2302      	movs	r3, #2
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e013      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002714:	2301      	movs	r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	e010      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d902      	bls.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002720:	2303      	movs	r3, #3
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	e00a      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d102      	bne.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272c:	2302      	movs	r3, #2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e004      	b.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d101      	bne.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002738:	2301      	movs	r3, #1
 800273a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 0207 	bic.w	r2, r3, #7
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277c:	2300      	movs	r3, #0
 800277e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002788:	2b00      	cmp	r3, #0
 800278a:	d031      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002794:	d01a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002796:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800279a:	d814      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a4:	d10f      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b2:	e00c      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f9de 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c4:	e003      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ca:	e000      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80027cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10b      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027d4:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	494e      	ldr	r1, [pc, #312]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027ea:	e001      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 809e 	beq.w	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002802:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002818:	4b40      	ldr	r3, [pc, #256]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	4a3f      	ldr	r2, [pc, #252]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800281e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002822:	6593      	str	r3, [r2, #88]	; 0x58
 8002824:	4b3d      	ldr	r3, [pc, #244]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002830:	2301      	movs	r3, #1
 8002832:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002834:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a39      	ldr	r2, [pc, #228]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002840:	f7fe f9fc 	bl	8000c3c <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002846:	e009      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe f9f8 	bl	8000c3c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	74fb      	strb	r3, [r7, #19]
        break;
 800285a:	e005      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ef      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d15a      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800286e:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002878:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01e      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	429a      	cmp	r2, r3
 8002888:	d019      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800288a:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002896:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800289e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028b6:	4a19      	ldr	r2, [pc, #100]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d016      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe f9b8 	bl	8000c3c <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ce:	e00b      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe f9b4 	bl	8000c3c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d902      	bls.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	74fb      	strb	r3, [r7, #19]
            break;
 80028e6:	e006      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ec      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	4904      	ldr	r1, [pc, #16]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002912:	e009      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
 8002918:	e006      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002928:	7c7b      	ldrb	r3, [r7, #17]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a89      	ldr	r2, [pc, #548]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002946:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f023 0203 	bic.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4980      	ldr	r1, [pc, #512]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 020c 	bic.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	4978      	ldr	r1, [pc, #480]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298a:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	496f      	ldr	r1, [pc, #444]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	4967      	ldr	r1, [pc, #412]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ce:	4b62      	ldr	r3, [pc, #392]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	495e      	ldr	r1, [pc, #376]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	4956      	ldr	r1, [pc, #344]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a12:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	494d      	ldr	r1, [pc, #308]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d028      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4945      	ldr	r1, [pc, #276]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a52:	d106      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a54:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a3f      	ldr	r2, [pc, #252]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5e:	60d3      	str	r3, [r2, #12]
 8002a60:	e011      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6a:	d10c      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f882 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	492d      	ldr	r1, [pc, #180]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abc:	60d3      	str	r3, [r2, #12]
 8002abe:	e011      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f853 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01c      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	4916      	ldr	r1, [pc, #88]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f830 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8a:	4b74      	ldr	r3, [pc, #464]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b96:	4b71      	ldr	r3, [pc, #452]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10d      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bae:	4b6b      	ldr	r3, [pc, #428]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d047      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e044      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d018      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0x86>
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d825      	bhi.n	8002c20 <RCCEx_PLLSAI1_Config+0xa4>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <RCCEx_PLLSAI1_Config+0x62>
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d009      	beq.n	8002bf0 <RCCEx_PLLSAI1_Config+0x74>
 8002bdc:	e020      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bde:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11d      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bee:	e01a      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf0:	4b5a      	ldr	r3, [pc, #360]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c00:	e013      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c02:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c0e:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c1e:	e006      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e004      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c36:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6819      	ldr	r1, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	4943      	ldr	r1, [pc, #268]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d17c      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fd ffea 	bl	8000c3c <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c6c:	f7fd ffe6 	bl	8000c3c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c80:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ef      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d15f      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d110      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ca0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	0211      	lsls	r1, r2, #8
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	06d2      	lsls	r2, r2, #27
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	492a      	ldr	r1, [pc, #168]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	610b      	str	r3, [r1, #16]
 8002cb8:	e027      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d112      	bne.n	8002ce6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc0:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6912      	ldr	r2, [r2, #16]
 8002cd6:	0852      	lsrs	r2, r2, #1
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0552      	lsls	r2, r2, #21
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	491f      	ldr	r1, [pc, #124]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	610b      	str	r3, [r1, #16]
 8002ce4:	e011      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6892      	ldr	r2, [r2, #8]
 8002cf6:	0211      	lsls	r1, r2, #8
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6952      	ldr	r2, [r2, #20]
 8002cfc:	0852      	lsrs	r2, r2, #1
 8002cfe:	3a01      	subs	r2, #1
 8002d00:	0652      	lsls	r2, r2, #25
 8002d02:	430a      	orrs	r2, r1
 8002d04:	4915      	ldr	r1, [pc, #84]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d0a:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fd ff91 	bl	8000c3c <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d1c:	e009      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d1e:	f7fd ff8d 	bl	8000c3c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d902      	bls.n	8002d32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d30:	e005      	b.n	8002d3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0ef      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4903      	ldr	r1, [pc, #12]	; (8002d5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e040      	b.n	8002df4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fdec 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2224      	movs	r2, #36	; 0x24
 8002d8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8c0 	bl	8002f24 <UART_SetConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e022      	b.n	8002df4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fae0 	bl	800337c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fb67 	bl	80034c0 <UART_CheckIdleState>
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	f040 8082 	bne.w	8002f1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <HAL_UART_Transmit+0x26>
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07a      	b.n	8002f1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit+0x38>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e073      	b.n	8002f1c <HAL_UART_Transmit+0x120>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2221      	movs	r2, #33	; 0x21
 8002e48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e4a:	f7fd fef7 	bl	8000c3c <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e68:	d108      	bne.n	8002e7c <HAL_UART_Transmit+0x80>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d104      	bne.n	8002e7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e003      	b.n	8002e84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e8c:	e02d      	b.n	8002eea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fb5a 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e039      	b.n	8002f1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	881a      	ldrh	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e008      	b.n	8002ed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1cb      	bne.n	8002e8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2140      	movs	r1, #64	; 0x40
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fb26 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e005      	b.n	8002f1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f28:	b08a      	sub	sp, #40	; 0x28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4bb4      	ldr	r3, [pc, #720]	; (8003224 <UART_SetConfig+0x300>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4aa9      	ldr	r2, [pc, #676]	; (8003228 <UART_SetConfig+0x304>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4aa0      	ldr	r2, [pc, #640]	; (800322c <UART_SetConfig+0x308>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d126      	bne.n	8002ffc <UART_SetConfig+0xd8>
 8002fae:	4ba0      	ldr	r3, [pc, #640]	; (8003230 <UART_SetConfig+0x30c>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d81b      	bhi.n	8002ff4 <UART_SetConfig+0xd0>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0xa0>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fe5 	.word	0x08002fe5
 8002fcc:	08002fdd 	.word	0x08002fdd
 8002fd0:	08002fed 	.word	0x08002fed
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fda:	e080      	b.n	80030de <UART_SetConfig+0x1ba>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe2:	e07c      	b.n	80030de <UART_SetConfig+0x1ba>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fea:	e078      	b.n	80030de <UART_SetConfig+0x1ba>
 8002fec:	2308      	movs	r3, #8
 8002fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff2:	e074      	b.n	80030de <UART_SetConfig+0x1ba>
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffa:	e070      	b.n	80030de <UART_SetConfig+0x1ba>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a8c      	ldr	r2, [pc, #560]	; (8003234 <UART_SetConfig+0x310>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d138      	bne.n	8003078 <UART_SetConfig+0x154>
 8003006:	4b8a      	ldr	r3, [pc, #552]	; (8003230 <UART_SetConfig+0x30c>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b0c      	cmp	r3, #12
 8003012:	d82d      	bhi.n	8003070 <UART_SetConfig+0x14c>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <UART_SetConfig+0xf8>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003051 	.word	0x08003051
 8003020:	08003071 	.word	0x08003071
 8003024:	08003071 	.word	0x08003071
 8003028:	08003071 	.word	0x08003071
 800302c:	08003061 	.word	0x08003061
 8003030:	08003071 	.word	0x08003071
 8003034:	08003071 	.word	0x08003071
 8003038:	08003071 	.word	0x08003071
 800303c:	08003059 	.word	0x08003059
 8003040:	08003071 	.word	0x08003071
 8003044:	08003071 	.word	0x08003071
 8003048:	08003071 	.word	0x08003071
 800304c:	08003069 	.word	0x08003069
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003056:	e042      	b.n	80030de <UART_SetConfig+0x1ba>
 8003058:	2302      	movs	r3, #2
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305e:	e03e      	b.n	80030de <UART_SetConfig+0x1ba>
 8003060:	2304      	movs	r3, #4
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e03a      	b.n	80030de <UART_SetConfig+0x1ba>
 8003068:	2308      	movs	r3, #8
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e036      	b.n	80030de <UART_SetConfig+0x1ba>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e032      	b.n	80030de <UART_SetConfig+0x1ba>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <UART_SetConfig+0x304>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d12a      	bne.n	80030d8 <UART_SetConfig+0x1b4>
 8003082:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <UART_SetConfig+0x30c>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800308c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003090:	d01a      	beq.n	80030c8 <UART_SetConfig+0x1a4>
 8003092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003096:	d81b      	bhi.n	80030d0 <UART_SetConfig+0x1ac>
 8003098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309c:	d00c      	beq.n	80030b8 <UART_SetConfig+0x194>
 800309e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a2:	d815      	bhi.n	80030d0 <UART_SetConfig+0x1ac>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <UART_SetConfig+0x18c>
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d008      	beq.n	80030c0 <UART_SetConfig+0x19c>
 80030ae:	e00f      	b.n	80030d0 <UART_SetConfig+0x1ac>
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b6:	e012      	b.n	80030de <UART_SetConfig+0x1ba>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030be:	e00e      	b.n	80030de <UART_SetConfig+0x1ba>
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e00a      	b.n	80030de <UART_SetConfig+0x1ba>
 80030c8:	2308      	movs	r3, #8
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e006      	b.n	80030de <UART_SetConfig+0x1ba>
 80030d0:	2310      	movs	r3, #16
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e002      	b.n	80030de <UART_SetConfig+0x1ba>
 80030d8:	2310      	movs	r3, #16
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a51      	ldr	r2, [pc, #324]	; (8003228 <UART_SetConfig+0x304>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d17a      	bne.n	80031de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d824      	bhi.n	800313a <UART_SetConfig+0x216>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <UART_SetConfig+0x1d4>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	0800311d 	.word	0x0800311d
 80030fc:	0800313b 	.word	0x0800313b
 8003100:	08003125 	.word	0x08003125
 8003104:	0800313b 	.word	0x0800313b
 8003108:	0800312b 	.word	0x0800312b
 800310c:	0800313b 	.word	0x0800313b
 8003110:	0800313b 	.word	0x0800313b
 8003114:	0800313b 	.word	0x0800313b
 8003118:	08003133 	.word	0x08003133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800311c:	f7ff fa9c 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8003120:	61f8      	str	r0, [r7, #28]
        break;
 8003122:	e010      	b.n	8003146 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003124:	4b44      	ldr	r3, [pc, #272]	; (8003238 <UART_SetConfig+0x314>)
 8003126:	61fb      	str	r3, [r7, #28]
        break;
 8003128:	e00d      	b.n	8003146 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7ff f9fd 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 800312e:	61f8      	str	r0, [r7, #28]
        break;
 8003130:	e009      	b.n	8003146 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e005      	b.n	8003146 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003144:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8107 	beq.w	800335c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	429a      	cmp	r2, r3
 800315c:	d305      	bcc.n	800316a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	429a      	cmp	r2, r3
 8003168:	d903      	bls.n	8003172 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003170:	e0f4      	b.n	800335c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2200      	movs	r2, #0
 8003176:	461c      	mov	r4, r3
 8003178:	4615      	mov	r5, r2
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	022b      	lsls	r3, r5, #8
 8003184:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003188:	0222      	lsls	r2, r4, #8
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	6849      	ldr	r1, [r1, #4]
 800318e:	0849      	lsrs	r1, r1, #1
 8003190:	2000      	movs	r0, #0
 8003192:	4688      	mov	r8, r1
 8003194:	4681      	mov	r9, r0
 8003196:	eb12 0a08 	adds.w	sl, r2, r8
 800319a:	eb43 0b09 	adc.w	fp, r3, r9
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ac:	4650      	mov	r0, sl
 80031ae:	4659      	mov	r1, fp
 80031b0:	f7fd f866 	bl	8000280 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c2:	d308      	bcc.n	80031d6 <UART_SetConfig+0x2b2>
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ca:	d204      	bcs.n	80031d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	e0c2      	b.n	800335c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031dc:	e0be      	b.n	800335c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e6:	d16a      	bne.n	80032be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80031e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d834      	bhi.n	800325a <UART_SetConfig+0x336>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0x2d4>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	0800323d 	.word	0x0800323d
 8003200:	08003245 	.word	0x08003245
 8003204:	0800325b 	.word	0x0800325b
 8003208:	0800324b 	.word	0x0800324b
 800320c:	0800325b 	.word	0x0800325b
 8003210:	0800325b 	.word	0x0800325b
 8003214:	0800325b 	.word	0x0800325b
 8003218:	08003253 	.word	0x08003253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7ff fa1c 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8003220:	61f8      	str	r0, [r7, #28]
        break;
 8003222:	e020      	b.n	8003266 <UART_SetConfig+0x342>
 8003224:	efff69f3 	.word	0xefff69f3
 8003228:	40008000 	.word	0x40008000
 800322c:	40013800 	.word	0x40013800
 8003230:	40021000 	.word	0x40021000
 8003234:	40004400 	.word	0x40004400
 8003238:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800323c:	f7ff fa22 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 8003240:	61f8      	str	r0, [r7, #28]
        break;
 8003242:	e010      	b.n	8003266 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003244:	4b4c      	ldr	r3, [pc, #304]	; (8003378 <UART_SetConfig+0x454>)
 8003246:	61fb      	str	r3, [r7, #28]
        break;
 8003248:	e00d      	b.n	8003266 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800324a:	f7ff f96d 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 800324e:	61f8      	str	r0, [r7, #28]
        break;
 8003250:	e009      	b.n	8003266 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003256:	61fb      	str	r3, [r7, #28]
        break;
 8003258:	e005      	b.n	8003266 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d077      	beq.n	800335c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	005a      	lsls	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d916      	bls.n	80032b6 <UART_SetConfig+0x392>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328e:	d212      	bcs.n	80032b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f023 030f 	bic.w	r3, r3, #15
 8003298:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	8afb      	ldrh	r3, [r7, #22]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	8afa      	ldrh	r2, [r7, #22]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e052      	b.n	800335c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032bc:	e04e      	b.n	800335c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d827      	bhi.n	8003316 <UART_SetConfig+0x3f2>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <UART_SetConfig+0x3a8>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	080032f9 	.word	0x080032f9
 80032d4:	08003301 	.word	0x08003301
 80032d8:	08003317 	.word	0x08003317
 80032dc:	08003307 	.word	0x08003307
 80032e0:	08003317 	.word	0x08003317
 80032e4:	08003317 	.word	0x08003317
 80032e8:	08003317 	.word	0x08003317
 80032ec:	0800330f 	.word	0x0800330f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7ff f9b2 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 80032f4:	61f8      	str	r0, [r7, #28]
        break;
 80032f6:	e014      	b.n	8003322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7ff f9c4 	bl	8002684 <HAL_RCC_GetPCLK2Freq>
 80032fc:	61f8      	str	r0, [r7, #28]
        break;
 80032fe:	e010      	b.n	8003322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003300:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <UART_SetConfig+0x454>)
 8003302:	61fb      	str	r3, [r7, #28]
        break;
 8003304:	e00d      	b.n	8003322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003306:	f7ff f90f 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 800330a:	61f8      	str	r0, [r7, #28]
        break;
 800330c:	e009      	b.n	8003322 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	61fb      	str	r3, [r7, #28]
        break;
 8003314:	e005      	b.n	8003322 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003320:	bf00      	nop
    }

    if (pclk != 0U)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d019      	beq.n	800335c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	085a      	lsrs	r2, r3, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	441a      	add	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	d909      	bls.n	8003356 <UART_SetConfig+0x432>
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d205      	bcs.n	8003356 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	e002      	b.n	800335c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003368:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800336c:	4618      	mov	r0, r3
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003376:	bf00      	nop
 8003378:	00f42400 	.word	0x00f42400

0800337c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01a      	beq.n	8003492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347a:	d10a      	bne.n	8003492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d0:	f7fd fbb4 	bl	8000c3c <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d10e      	bne.n	8003502 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f82d 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e023      	b.n	800354a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d10e      	bne.n	800352e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f817 	bl	8003552 <UART_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00d      	b.n	800354a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b09c      	sub	sp, #112	; 0x70
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	e0a5      	b.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356a:	f000 80a1 	beq.w	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fd fb65 	bl	8000c3c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <UART_WaitOnFlagUntilTimeout+0x32>
 800357e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003580:	2b00      	cmp	r3, #0
 8003582:	d13e      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003594:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003598:	667b      	str	r3, [r7, #100]	; 0x64
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1e6      	bne.n	8003584 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	663b      	str	r3, [r7, #96]	; 0x60
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3308      	adds	r3, #8
 80035d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80035d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e5      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e067      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d04f      	beq.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361e:	d147      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003628:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800363e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3308      	adds	r3, #8
 8003662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	613b      	str	r3, [r7, #16]
   return(result);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	66bb      	str	r3, [r7, #104]	; 0x68
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3308      	adds	r3, #8
 800367a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800367c:	623a      	str	r2, [r7, #32]
 800367e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	69f9      	ldr	r1, [r7, #28]
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	61bb      	str	r3, [r7, #24]
   return(result);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e010      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	f43f af4a 	beq.w	8003564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3770      	adds	r7, #112	; 0x70
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <__errno>:
 80036dc:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <__errno+0x8>)
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c

080036e8 <__libc_init_array>:
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	4d0d      	ldr	r5, [pc, #52]	; (8003720 <__libc_init_array+0x38>)
 80036ec:	4c0d      	ldr	r4, [pc, #52]	; (8003724 <__libc_init_array+0x3c>)
 80036ee:	1b64      	subs	r4, r4, r5
 80036f0:	10a4      	asrs	r4, r4, #2
 80036f2:	2600      	movs	r6, #0
 80036f4:	42a6      	cmp	r6, r4
 80036f6:	d109      	bne.n	800370c <__libc_init_array+0x24>
 80036f8:	4d0b      	ldr	r5, [pc, #44]	; (8003728 <__libc_init_array+0x40>)
 80036fa:	4c0c      	ldr	r4, [pc, #48]	; (800372c <__libc_init_array+0x44>)
 80036fc:	f000 fc8e 	bl	800401c <_init>
 8003700:	1b64      	subs	r4, r4, r5
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	2600      	movs	r6, #0
 8003706:	42a6      	cmp	r6, r4
 8003708:	d105      	bne.n	8003716 <__libc_init_array+0x2e>
 800370a:	bd70      	pop	{r4, r5, r6, pc}
 800370c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003710:	4798      	blx	r3
 8003712:	3601      	adds	r6, #1
 8003714:	e7ee      	b.n	80036f4 <__libc_init_array+0xc>
 8003716:	f855 3b04 	ldr.w	r3, [r5], #4
 800371a:	4798      	blx	r3
 800371c:	3601      	adds	r6, #1
 800371e:	e7f2      	b.n	8003706 <__libc_init_array+0x1e>
 8003720:	080040c4 	.word	0x080040c4
 8003724:	080040c4 	.word	0x080040c4
 8003728:	080040c4 	.word	0x080040c4
 800372c:	080040c8 	.word	0x080040c8

08003730 <memset>:
 8003730:	4402      	add	r2, r0
 8003732:	4603      	mov	r3, r0
 8003734:	4293      	cmp	r3, r2
 8003736:	d100      	bne.n	800373a <memset+0xa>
 8003738:	4770      	bx	lr
 800373a:	f803 1b01 	strb.w	r1, [r3], #1
 800373e:	e7f9      	b.n	8003734 <memset+0x4>

08003740 <siprintf>:
 8003740:	b40e      	push	{r1, r2, r3}
 8003742:	b500      	push	{lr}
 8003744:	b09c      	sub	sp, #112	; 0x70
 8003746:	ab1d      	add	r3, sp, #116	; 0x74
 8003748:	9002      	str	r0, [sp, #8]
 800374a:	9006      	str	r0, [sp, #24]
 800374c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003750:	4809      	ldr	r0, [pc, #36]	; (8003778 <siprintf+0x38>)
 8003752:	9107      	str	r1, [sp, #28]
 8003754:	9104      	str	r1, [sp, #16]
 8003756:	4909      	ldr	r1, [pc, #36]	; (800377c <siprintf+0x3c>)
 8003758:	f853 2b04 	ldr.w	r2, [r3], #4
 800375c:	9105      	str	r1, [sp, #20]
 800375e:	6800      	ldr	r0, [r0, #0]
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	a902      	add	r1, sp, #8
 8003764:	f000 f868 	bl	8003838 <_svfiprintf_r>
 8003768:	9b02      	ldr	r3, [sp, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
 800376e:	b01c      	add	sp, #112	; 0x70
 8003770:	f85d eb04 	ldr.w	lr, [sp], #4
 8003774:	b003      	add	sp, #12
 8003776:	4770      	bx	lr
 8003778:	2000000c 	.word	0x2000000c
 800377c:	ffff0208 	.word	0xffff0208

08003780 <__ssputs_r>:
 8003780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003784:	688e      	ldr	r6, [r1, #8]
 8003786:	429e      	cmp	r6, r3
 8003788:	4682      	mov	sl, r0
 800378a:	460c      	mov	r4, r1
 800378c:	4690      	mov	r8, r2
 800378e:	461f      	mov	r7, r3
 8003790:	d838      	bhi.n	8003804 <__ssputs_r+0x84>
 8003792:	898a      	ldrh	r2, [r1, #12]
 8003794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003798:	d032      	beq.n	8003800 <__ssputs_r+0x80>
 800379a:	6825      	ldr	r5, [r4, #0]
 800379c:	6909      	ldr	r1, [r1, #16]
 800379e:	eba5 0901 	sub.w	r9, r5, r1
 80037a2:	6965      	ldr	r5, [r4, #20]
 80037a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037ac:	3301      	adds	r3, #1
 80037ae:	444b      	add	r3, r9
 80037b0:	106d      	asrs	r5, r5, #1
 80037b2:	429d      	cmp	r5, r3
 80037b4:	bf38      	it	cc
 80037b6:	461d      	movcc	r5, r3
 80037b8:	0553      	lsls	r3, r2, #21
 80037ba:	d531      	bpl.n	8003820 <__ssputs_r+0xa0>
 80037bc:	4629      	mov	r1, r5
 80037be:	f000 fb63 	bl	8003e88 <_malloc_r>
 80037c2:	4606      	mov	r6, r0
 80037c4:	b950      	cbnz	r0, 80037dc <__ssputs_r+0x5c>
 80037c6:	230c      	movs	r3, #12
 80037c8:	f8ca 3000 	str.w	r3, [sl]
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037dc:	6921      	ldr	r1, [r4, #16]
 80037de:	464a      	mov	r2, r9
 80037e0:	f000 fabe 	bl	8003d60 <memcpy>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ee:	81a3      	strh	r3, [r4, #12]
 80037f0:	6126      	str	r6, [r4, #16]
 80037f2:	6165      	str	r5, [r4, #20]
 80037f4:	444e      	add	r6, r9
 80037f6:	eba5 0509 	sub.w	r5, r5, r9
 80037fa:	6026      	str	r6, [r4, #0]
 80037fc:	60a5      	str	r5, [r4, #8]
 80037fe:	463e      	mov	r6, r7
 8003800:	42be      	cmp	r6, r7
 8003802:	d900      	bls.n	8003806 <__ssputs_r+0x86>
 8003804:	463e      	mov	r6, r7
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	4632      	mov	r2, r6
 800380a:	4641      	mov	r1, r8
 800380c:	f000 fab6 	bl	8003d7c <memmove>
 8003810:	68a3      	ldr	r3, [r4, #8]
 8003812:	1b9b      	subs	r3, r3, r6
 8003814:	60a3      	str	r3, [r4, #8]
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	4433      	add	r3, r6
 800381a:	6023      	str	r3, [r4, #0]
 800381c:	2000      	movs	r0, #0
 800381e:	e7db      	b.n	80037d8 <__ssputs_r+0x58>
 8003820:	462a      	mov	r2, r5
 8003822:	f000 fba5 	bl	8003f70 <_realloc_r>
 8003826:	4606      	mov	r6, r0
 8003828:	2800      	cmp	r0, #0
 800382a:	d1e1      	bne.n	80037f0 <__ssputs_r+0x70>
 800382c:	6921      	ldr	r1, [r4, #16]
 800382e:	4650      	mov	r0, sl
 8003830:	f000 fabe 	bl	8003db0 <_free_r>
 8003834:	e7c7      	b.n	80037c6 <__ssputs_r+0x46>
	...

08003838 <_svfiprintf_r>:
 8003838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383c:	4698      	mov	r8, r3
 800383e:	898b      	ldrh	r3, [r1, #12]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	b09d      	sub	sp, #116	; 0x74
 8003844:	4607      	mov	r7, r0
 8003846:	460d      	mov	r5, r1
 8003848:	4614      	mov	r4, r2
 800384a:	d50e      	bpl.n	800386a <_svfiprintf_r+0x32>
 800384c:	690b      	ldr	r3, [r1, #16]
 800384e:	b963      	cbnz	r3, 800386a <_svfiprintf_r+0x32>
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	f000 fb19 	bl	8003e88 <_malloc_r>
 8003856:	6028      	str	r0, [r5, #0]
 8003858:	6128      	str	r0, [r5, #16]
 800385a:	b920      	cbnz	r0, 8003866 <_svfiprintf_r+0x2e>
 800385c:	230c      	movs	r3, #12
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003864:	e0d1      	b.n	8003a0a <_svfiprintf_r+0x1d2>
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	616b      	str	r3, [r5, #20]
 800386a:	2300      	movs	r3, #0
 800386c:	9309      	str	r3, [sp, #36]	; 0x24
 800386e:	2320      	movs	r3, #32
 8003870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003874:	f8cd 800c 	str.w	r8, [sp, #12]
 8003878:	2330      	movs	r3, #48	; 0x30
 800387a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a24 <_svfiprintf_r+0x1ec>
 800387e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003882:	f04f 0901 	mov.w	r9, #1
 8003886:	4623      	mov	r3, r4
 8003888:	469a      	mov	sl, r3
 800388a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800388e:	b10a      	cbz	r2, 8003894 <_svfiprintf_r+0x5c>
 8003890:	2a25      	cmp	r2, #37	; 0x25
 8003892:	d1f9      	bne.n	8003888 <_svfiprintf_r+0x50>
 8003894:	ebba 0b04 	subs.w	fp, sl, r4
 8003898:	d00b      	beq.n	80038b2 <_svfiprintf_r+0x7a>
 800389a:	465b      	mov	r3, fp
 800389c:	4622      	mov	r2, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	4638      	mov	r0, r7
 80038a2:	f7ff ff6d 	bl	8003780 <__ssputs_r>
 80038a6:	3001      	adds	r0, #1
 80038a8:	f000 80aa 	beq.w	8003a00 <_svfiprintf_r+0x1c8>
 80038ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ae:	445a      	add	r2, fp
 80038b0:	9209      	str	r2, [sp, #36]	; 0x24
 80038b2:	f89a 3000 	ldrb.w	r3, [sl]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80a2 	beq.w	8003a00 <_svfiprintf_r+0x1c8>
 80038bc:	2300      	movs	r3, #0
 80038be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038c6:	f10a 0a01 	add.w	sl, sl, #1
 80038ca:	9304      	str	r3, [sp, #16]
 80038cc:	9307      	str	r3, [sp, #28]
 80038ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038d2:	931a      	str	r3, [sp, #104]	; 0x68
 80038d4:	4654      	mov	r4, sl
 80038d6:	2205      	movs	r2, #5
 80038d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038dc:	4851      	ldr	r0, [pc, #324]	; (8003a24 <_svfiprintf_r+0x1ec>)
 80038de:	f7fc fc7f 	bl	80001e0 <memchr>
 80038e2:	9a04      	ldr	r2, [sp, #16]
 80038e4:	b9d8      	cbnz	r0, 800391e <_svfiprintf_r+0xe6>
 80038e6:	06d0      	lsls	r0, r2, #27
 80038e8:	bf44      	itt	mi
 80038ea:	2320      	movmi	r3, #32
 80038ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038f0:	0711      	lsls	r1, r2, #28
 80038f2:	bf44      	itt	mi
 80038f4:	232b      	movmi	r3, #43	; 0x2b
 80038f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038fa:	f89a 3000 	ldrb.w	r3, [sl]
 80038fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003900:	d015      	beq.n	800392e <_svfiprintf_r+0xf6>
 8003902:	9a07      	ldr	r2, [sp, #28]
 8003904:	4654      	mov	r4, sl
 8003906:	2000      	movs	r0, #0
 8003908:	f04f 0c0a 	mov.w	ip, #10
 800390c:	4621      	mov	r1, r4
 800390e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003912:	3b30      	subs	r3, #48	; 0x30
 8003914:	2b09      	cmp	r3, #9
 8003916:	d94e      	bls.n	80039b6 <_svfiprintf_r+0x17e>
 8003918:	b1b0      	cbz	r0, 8003948 <_svfiprintf_r+0x110>
 800391a:	9207      	str	r2, [sp, #28]
 800391c:	e014      	b.n	8003948 <_svfiprintf_r+0x110>
 800391e:	eba0 0308 	sub.w	r3, r0, r8
 8003922:	fa09 f303 	lsl.w	r3, r9, r3
 8003926:	4313      	orrs	r3, r2
 8003928:	9304      	str	r3, [sp, #16]
 800392a:	46a2      	mov	sl, r4
 800392c:	e7d2      	b.n	80038d4 <_svfiprintf_r+0x9c>
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	1d19      	adds	r1, r3, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	9103      	str	r1, [sp, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfbb      	ittet	lt
 800393a:	425b      	neglt	r3, r3
 800393c:	f042 0202 	orrlt.w	r2, r2, #2
 8003940:	9307      	strge	r3, [sp, #28]
 8003942:	9307      	strlt	r3, [sp, #28]
 8003944:	bfb8      	it	lt
 8003946:	9204      	strlt	r2, [sp, #16]
 8003948:	7823      	ldrb	r3, [r4, #0]
 800394a:	2b2e      	cmp	r3, #46	; 0x2e
 800394c:	d10c      	bne.n	8003968 <_svfiprintf_r+0x130>
 800394e:	7863      	ldrb	r3, [r4, #1]
 8003950:	2b2a      	cmp	r3, #42	; 0x2a
 8003952:	d135      	bne.n	80039c0 <_svfiprintf_r+0x188>
 8003954:	9b03      	ldr	r3, [sp, #12]
 8003956:	1d1a      	adds	r2, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	9203      	str	r2, [sp, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	bfb8      	it	lt
 8003960:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003964:	3402      	adds	r4, #2
 8003966:	9305      	str	r3, [sp, #20]
 8003968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a34 <_svfiprintf_r+0x1fc>
 800396c:	7821      	ldrb	r1, [r4, #0]
 800396e:	2203      	movs	r2, #3
 8003970:	4650      	mov	r0, sl
 8003972:	f7fc fc35 	bl	80001e0 <memchr>
 8003976:	b140      	cbz	r0, 800398a <_svfiprintf_r+0x152>
 8003978:	2340      	movs	r3, #64	; 0x40
 800397a:	eba0 000a 	sub.w	r0, r0, sl
 800397e:	fa03 f000 	lsl.w	r0, r3, r0
 8003982:	9b04      	ldr	r3, [sp, #16]
 8003984:	4303      	orrs	r3, r0
 8003986:	3401      	adds	r4, #1
 8003988:	9304      	str	r3, [sp, #16]
 800398a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800398e:	4826      	ldr	r0, [pc, #152]	; (8003a28 <_svfiprintf_r+0x1f0>)
 8003990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003994:	2206      	movs	r2, #6
 8003996:	f7fc fc23 	bl	80001e0 <memchr>
 800399a:	2800      	cmp	r0, #0
 800399c:	d038      	beq.n	8003a10 <_svfiprintf_r+0x1d8>
 800399e:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <_svfiprintf_r+0x1f4>)
 80039a0:	bb1b      	cbnz	r3, 80039ea <_svfiprintf_r+0x1b2>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	3307      	adds	r3, #7
 80039a6:	f023 0307 	bic.w	r3, r3, #7
 80039aa:	3308      	adds	r3, #8
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b0:	4433      	add	r3, r6
 80039b2:	9309      	str	r3, [sp, #36]	; 0x24
 80039b4:	e767      	b.n	8003886 <_svfiprintf_r+0x4e>
 80039b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039ba:	460c      	mov	r4, r1
 80039bc:	2001      	movs	r0, #1
 80039be:	e7a5      	b.n	800390c <_svfiprintf_r+0xd4>
 80039c0:	2300      	movs	r3, #0
 80039c2:	3401      	adds	r4, #1
 80039c4:	9305      	str	r3, [sp, #20]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f04f 0c0a 	mov.w	ip, #10
 80039cc:	4620      	mov	r0, r4
 80039ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039d2:	3a30      	subs	r2, #48	; 0x30
 80039d4:	2a09      	cmp	r2, #9
 80039d6:	d903      	bls.n	80039e0 <_svfiprintf_r+0x1a8>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0c5      	beq.n	8003968 <_svfiprintf_r+0x130>
 80039dc:	9105      	str	r1, [sp, #20]
 80039de:	e7c3      	b.n	8003968 <_svfiprintf_r+0x130>
 80039e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039e4:	4604      	mov	r4, r0
 80039e6:	2301      	movs	r3, #1
 80039e8:	e7f0      	b.n	80039cc <_svfiprintf_r+0x194>
 80039ea:	ab03      	add	r3, sp, #12
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	462a      	mov	r2, r5
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <_svfiprintf_r+0x1f8>)
 80039f2:	a904      	add	r1, sp, #16
 80039f4:	4638      	mov	r0, r7
 80039f6:	f3af 8000 	nop.w
 80039fa:	1c42      	adds	r2, r0, #1
 80039fc:	4606      	mov	r6, r0
 80039fe:	d1d6      	bne.n	80039ae <_svfiprintf_r+0x176>
 8003a00:	89ab      	ldrh	r3, [r5, #12]
 8003a02:	065b      	lsls	r3, r3, #25
 8003a04:	f53f af2c 	bmi.w	8003860 <_svfiprintf_r+0x28>
 8003a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a0a:	b01d      	add	sp, #116	; 0x74
 8003a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a10:	ab03      	add	r3, sp, #12
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	462a      	mov	r2, r5
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <_svfiprintf_r+0x1f8>)
 8003a18:	a904      	add	r1, sp, #16
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f000 f87a 	bl	8003b14 <_printf_i>
 8003a20:	e7eb      	b.n	80039fa <_svfiprintf_r+0x1c2>
 8003a22:	bf00      	nop
 8003a24:	08004088 	.word	0x08004088
 8003a28:	08004092 	.word	0x08004092
 8003a2c:	00000000 	.word	0x00000000
 8003a30:	08003781 	.word	0x08003781
 8003a34:	0800408e 	.word	0x0800408e

08003a38 <_printf_common>:
 8003a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a3c:	4616      	mov	r6, r2
 8003a3e:	4699      	mov	r9, r3
 8003a40:	688a      	ldr	r2, [r1, #8]
 8003a42:	690b      	ldr	r3, [r1, #16]
 8003a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	bfb8      	it	lt
 8003a4c:	4613      	movlt	r3, r2
 8003a4e:	6033      	str	r3, [r6, #0]
 8003a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a54:	4607      	mov	r7, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	b10a      	cbz	r2, 8003a5e <_printf_common+0x26>
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	6033      	str	r3, [r6, #0]
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	0699      	lsls	r1, r3, #26
 8003a62:	bf42      	ittt	mi
 8003a64:	6833      	ldrmi	r3, [r6, #0]
 8003a66:	3302      	addmi	r3, #2
 8003a68:	6033      	strmi	r3, [r6, #0]
 8003a6a:	6825      	ldr	r5, [r4, #0]
 8003a6c:	f015 0506 	ands.w	r5, r5, #6
 8003a70:	d106      	bne.n	8003a80 <_printf_common+0x48>
 8003a72:	f104 0a19 	add.w	sl, r4, #25
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	6832      	ldr	r2, [r6, #0]
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	42ab      	cmp	r3, r5
 8003a7e:	dc26      	bgt.n	8003ace <_printf_common+0x96>
 8003a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a84:	1e13      	subs	r3, r2, #0
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	bf18      	it	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	0692      	lsls	r2, r2, #26
 8003a8e:	d42b      	bmi.n	8003ae8 <_printf_common+0xb0>
 8003a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a94:	4649      	mov	r1, r9
 8003a96:	4638      	mov	r0, r7
 8003a98:	47c0      	blx	r8
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d01e      	beq.n	8003adc <_printf_common+0xa4>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	68e5      	ldr	r5, [r4, #12]
 8003aa2:	6832      	ldr	r2, [r6, #0]
 8003aa4:	f003 0306 	and.w	r3, r3, #6
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	bf08      	it	eq
 8003aac:	1aad      	subeq	r5, r5, r2
 8003aae:	68a3      	ldr	r3, [r4, #8]
 8003ab0:	6922      	ldr	r2, [r4, #16]
 8003ab2:	bf0c      	ite	eq
 8003ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ab8:	2500      	movne	r5, #0
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bfc4      	itt	gt
 8003abe:	1a9b      	subgt	r3, r3, r2
 8003ac0:	18ed      	addgt	r5, r5, r3
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	341a      	adds	r4, #26
 8003ac6:	42b5      	cmp	r5, r6
 8003ac8:	d11a      	bne.n	8003b00 <_printf_common+0xc8>
 8003aca:	2000      	movs	r0, #0
 8003acc:	e008      	b.n	8003ae0 <_printf_common+0xa8>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4652      	mov	r2, sl
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	47c0      	blx	r8
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d103      	bne.n	8003ae4 <_printf_common+0xac>
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae4:	3501      	adds	r5, #1
 8003ae6:	e7c6      	b.n	8003a76 <_printf_common+0x3e>
 8003ae8:	18e1      	adds	r1, r4, r3
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	2030      	movs	r0, #48	; 0x30
 8003aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003af2:	4422      	add	r2, r4
 8003af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003afc:	3302      	adds	r3, #2
 8003afe:	e7c7      	b.n	8003a90 <_printf_common+0x58>
 8003b00:	2301      	movs	r3, #1
 8003b02:	4622      	mov	r2, r4
 8003b04:	4649      	mov	r1, r9
 8003b06:	4638      	mov	r0, r7
 8003b08:	47c0      	blx	r8
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0e6      	beq.n	8003adc <_printf_common+0xa4>
 8003b0e:	3601      	adds	r6, #1
 8003b10:	e7d9      	b.n	8003ac6 <_printf_common+0x8e>
	...

08003b14 <_printf_i>:
 8003b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	7e0f      	ldrb	r7, [r1, #24]
 8003b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b1c:	2f78      	cmp	r7, #120	; 0x78
 8003b1e:	4691      	mov	r9, r2
 8003b20:	4680      	mov	r8, r0
 8003b22:	460c      	mov	r4, r1
 8003b24:	469a      	mov	sl, r3
 8003b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b2a:	d807      	bhi.n	8003b3c <_printf_i+0x28>
 8003b2c:	2f62      	cmp	r7, #98	; 0x62
 8003b2e:	d80a      	bhi.n	8003b46 <_printf_i+0x32>
 8003b30:	2f00      	cmp	r7, #0
 8003b32:	f000 80d8 	beq.w	8003ce6 <_printf_i+0x1d2>
 8003b36:	2f58      	cmp	r7, #88	; 0x58
 8003b38:	f000 80a3 	beq.w	8003c82 <_printf_i+0x16e>
 8003b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b44:	e03a      	b.n	8003bbc <_printf_i+0xa8>
 8003b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b4a:	2b15      	cmp	r3, #21
 8003b4c:	d8f6      	bhi.n	8003b3c <_printf_i+0x28>
 8003b4e:	a101      	add	r1, pc, #4	; (adr r1, 8003b54 <_printf_i+0x40>)
 8003b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b54:	08003bad 	.word	0x08003bad
 8003b58:	08003bc1 	.word	0x08003bc1
 8003b5c:	08003b3d 	.word	0x08003b3d
 8003b60:	08003b3d 	.word	0x08003b3d
 8003b64:	08003b3d 	.word	0x08003b3d
 8003b68:	08003b3d 	.word	0x08003b3d
 8003b6c:	08003bc1 	.word	0x08003bc1
 8003b70:	08003b3d 	.word	0x08003b3d
 8003b74:	08003b3d 	.word	0x08003b3d
 8003b78:	08003b3d 	.word	0x08003b3d
 8003b7c:	08003b3d 	.word	0x08003b3d
 8003b80:	08003ccd 	.word	0x08003ccd
 8003b84:	08003bf1 	.word	0x08003bf1
 8003b88:	08003caf 	.word	0x08003caf
 8003b8c:	08003b3d 	.word	0x08003b3d
 8003b90:	08003b3d 	.word	0x08003b3d
 8003b94:	08003cef 	.word	0x08003cef
 8003b98:	08003b3d 	.word	0x08003b3d
 8003b9c:	08003bf1 	.word	0x08003bf1
 8003ba0:	08003b3d 	.word	0x08003b3d
 8003ba4:	08003b3d 	.word	0x08003b3d
 8003ba8:	08003cb7 	.word	0x08003cb7
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	602a      	str	r2, [r5, #0]
 8003bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0a3      	b.n	8003d08 <_printf_i+0x1f4>
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	6829      	ldr	r1, [r5, #0]
 8003bc4:	0606      	lsls	r6, r0, #24
 8003bc6:	f101 0304 	add.w	r3, r1, #4
 8003bca:	d50a      	bpl.n	8003be2 <_printf_i+0xce>
 8003bcc:	680e      	ldr	r6, [r1, #0]
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	da03      	bge.n	8003bdc <_printf_i+0xc8>
 8003bd4:	232d      	movs	r3, #45	; 0x2d
 8003bd6:	4276      	negs	r6, r6
 8003bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bdc:	485e      	ldr	r0, [pc, #376]	; (8003d58 <_printf_i+0x244>)
 8003bde:	230a      	movs	r3, #10
 8003be0:	e019      	b.n	8003c16 <_printf_i+0x102>
 8003be2:	680e      	ldr	r6, [r1, #0]
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bea:	bf18      	it	ne
 8003bec:	b236      	sxthne	r6, r6
 8003bee:	e7ef      	b.n	8003bd0 <_printf_i+0xbc>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	1d19      	adds	r1, r3, #4
 8003bf6:	6029      	str	r1, [r5, #0]
 8003bf8:	0601      	lsls	r1, r0, #24
 8003bfa:	d501      	bpl.n	8003c00 <_printf_i+0xec>
 8003bfc:	681e      	ldr	r6, [r3, #0]
 8003bfe:	e002      	b.n	8003c06 <_printf_i+0xf2>
 8003c00:	0646      	lsls	r6, r0, #25
 8003c02:	d5fb      	bpl.n	8003bfc <_printf_i+0xe8>
 8003c04:	881e      	ldrh	r6, [r3, #0]
 8003c06:	4854      	ldr	r0, [pc, #336]	; (8003d58 <_printf_i+0x244>)
 8003c08:	2f6f      	cmp	r7, #111	; 0x6f
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2308      	moveq	r3, #8
 8003c0e:	230a      	movne	r3, #10
 8003c10:	2100      	movs	r1, #0
 8003c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c16:	6865      	ldr	r5, [r4, #4]
 8003c18:	60a5      	str	r5, [r4, #8]
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	bfa2      	ittt	ge
 8003c1e:	6821      	ldrge	r1, [r4, #0]
 8003c20:	f021 0104 	bicge.w	r1, r1, #4
 8003c24:	6021      	strge	r1, [r4, #0]
 8003c26:	b90e      	cbnz	r6, 8003c2c <_printf_i+0x118>
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	d04d      	beq.n	8003cc8 <_printf_i+0x1b4>
 8003c2c:	4615      	mov	r5, r2
 8003c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c32:	fb03 6711 	mls	r7, r3, r1, r6
 8003c36:	5dc7      	ldrb	r7, [r0, r7]
 8003c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c3c:	4637      	mov	r7, r6
 8003c3e:	42bb      	cmp	r3, r7
 8003c40:	460e      	mov	r6, r1
 8003c42:	d9f4      	bls.n	8003c2e <_printf_i+0x11a>
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d10b      	bne.n	8003c60 <_printf_i+0x14c>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	07de      	lsls	r6, r3, #31
 8003c4c:	d508      	bpl.n	8003c60 <_printf_i+0x14c>
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	6861      	ldr	r1, [r4, #4]
 8003c52:	4299      	cmp	r1, r3
 8003c54:	bfde      	ittt	le
 8003c56:	2330      	movle	r3, #48	; 0x30
 8003c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c60:	1b52      	subs	r2, r2, r5
 8003c62:	6122      	str	r2, [r4, #16]
 8003c64:	f8cd a000 	str.w	sl, [sp]
 8003c68:	464b      	mov	r3, r9
 8003c6a:	aa03      	add	r2, sp, #12
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	4640      	mov	r0, r8
 8003c70:	f7ff fee2 	bl	8003a38 <_printf_common>
 8003c74:	3001      	adds	r0, #1
 8003c76:	d14c      	bne.n	8003d12 <_printf_i+0x1fe>
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c7c:	b004      	add	sp, #16
 8003c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c82:	4835      	ldr	r0, [pc, #212]	; (8003d58 <_printf_i+0x244>)
 8003c84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c88:	6829      	ldr	r1, [r5, #0]
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c90:	6029      	str	r1, [r5, #0]
 8003c92:	061d      	lsls	r5, r3, #24
 8003c94:	d514      	bpl.n	8003cc0 <_printf_i+0x1ac>
 8003c96:	07df      	lsls	r7, r3, #31
 8003c98:	bf44      	itt	mi
 8003c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c9e:	6023      	strmi	r3, [r4, #0]
 8003ca0:	b91e      	cbnz	r6, 8003caa <_printf_i+0x196>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f023 0320 	bic.w	r3, r3, #32
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	2310      	movs	r3, #16
 8003cac:	e7b0      	b.n	8003c10 <_printf_i+0xfc>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	2378      	movs	r3, #120	; 0x78
 8003cb8:	4828      	ldr	r0, [pc, #160]	; (8003d5c <_printf_i+0x248>)
 8003cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cbe:	e7e3      	b.n	8003c88 <_printf_i+0x174>
 8003cc0:	0659      	lsls	r1, r3, #25
 8003cc2:	bf48      	it	mi
 8003cc4:	b2b6      	uxthmi	r6, r6
 8003cc6:	e7e6      	b.n	8003c96 <_printf_i+0x182>
 8003cc8:	4615      	mov	r5, r2
 8003cca:	e7bb      	b.n	8003c44 <_printf_i+0x130>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	6826      	ldr	r6, [r4, #0]
 8003cd0:	6961      	ldr	r1, [r4, #20]
 8003cd2:	1d18      	adds	r0, r3, #4
 8003cd4:	6028      	str	r0, [r5, #0]
 8003cd6:	0635      	lsls	r5, r6, #24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	d501      	bpl.n	8003ce0 <_printf_i+0x1cc>
 8003cdc:	6019      	str	r1, [r3, #0]
 8003cde:	e002      	b.n	8003ce6 <_printf_i+0x1d2>
 8003ce0:	0670      	lsls	r0, r6, #25
 8003ce2:	d5fb      	bpl.n	8003cdc <_printf_i+0x1c8>
 8003ce4:	8019      	strh	r1, [r3, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6123      	str	r3, [r4, #16]
 8003cea:	4615      	mov	r5, r2
 8003cec:	e7ba      	b.n	8003c64 <_printf_i+0x150>
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	602a      	str	r2, [r5, #0]
 8003cf4:	681d      	ldr	r5, [r3, #0]
 8003cf6:	6862      	ldr	r2, [r4, #4]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7fc fa70 	bl	80001e0 <memchr>
 8003d00:	b108      	cbz	r0, 8003d06 <_printf_i+0x1f2>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	6060      	str	r0, [r4, #4]
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	6123      	str	r3, [r4, #16]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d10:	e7a8      	b.n	8003c64 <_printf_i+0x150>
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	462a      	mov	r2, r5
 8003d16:	4649      	mov	r1, r9
 8003d18:	4640      	mov	r0, r8
 8003d1a:	47d0      	blx	sl
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d0ab      	beq.n	8003c78 <_printf_i+0x164>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	079b      	lsls	r3, r3, #30
 8003d24:	d413      	bmi.n	8003d4e <_printf_i+0x23a>
 8003d26:	68e0      	ldr	r0, [r4, #12]
 8003d28:	9b03      	ldr	r3, [sp, #12]
 8003d2a:	4298      	cmp	r0, r3
 8003d2c:	bfb8      	it	lt
 8003d2e:	4618      	movlt	r0, r3
 8003d30:	e7a4      	b.n	8003c7c <_printf_i+0x168>
 8003d32:	2301      	movs	r3, #1
 8003d34:	4632      	mov	r2, r6
 8003d36:	4649      	mov	r1, r9
 8003d38:	4640      	mov	r0, r8
 8003d3a:	47d0      	blx	sl
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d09b      	beq.n	8003c78 <_printf_i+0x164>
 8003d40:	3501      	adds	r5, #1
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	9903      	ldr	r1, [sp, #12]
 8003d46:	1a5b      	subs	r3, r3, r1
 8003d48:	42ab      	cmp	r3, r5
 8003d4a:	dcf2      	bgt.n	8003d32 <_printf_i+0x21e>
 8003d4c:	e7eb      	b.n	8003d26 <_printf_i+0x212>
 8003d4e:	2500      	movs	r5, #0
 8003d50:	f104 0619 	add.w	r6, r4, #25
 8003d54:	e7f5      	b.n	8003d42 <_printf_i+0x22e>
 8003d56:	bf00      	nop
 8003d58:	08004099 	.word	0x08004099
 8003d5c:	080040aa 	.word	0x080040aa

08003d60 <memcpy>:
 8003d60:	440a      	add	r2, r1
 8003d62:	4291      	cmp	r1, r2
 8003d64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d68:	d100      	bne.n	8003d6c <memcpy+0xc>
 8003d6a:	4770      	bx	lr
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d76:	4291      	cmp	r1, r2
 8003d78:	d1f9      	bne.n	8003d6e <memcpy+0xe>
 8003d7a:	bd10      	pop	{r4, pc}

08003d7c <memmove>:
 8003d7c:	4288      	cmp	r0, r1
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	eb01 0402 	add.w	r4, r1, r2
 8003d84:	d902      	bls.n	8003d8c <memmove+0x10>
 8003d86:	4284      	cmp	r4, r0
 8003d88:	4623      	mov	r3, r4
 8003d8a:	d807      	bhi.n	8003d9c <memmove+0x20>
 8003d8c:	1e43      	subs	r3, r0, #1
 8003d8e:	42a1      	cmp	r1, r4
 8003d90:	d008      	beq.n	8003da4 <memmove+0x28>
 8003d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d9a:	e7f8      	b.n	8003d8e <memmove+0x12>
 8003d9c:	4402      	add	r2, r0
 8003d9e:	4601      	mov	r1, r0
 8003da0:	428a      	cmp	r2, r1
 8003da2:	d100      	bne.n	8003da6 <memmove+0x2a>
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dae:	e7f7      	b.n	8003da0 <memmove+0x24>

08003db0 <_free_r>:
 8003db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003db2:	2900      	cmp	r1, #0
 8003db4:	d044      	beq.n	8003e40 <_free_r+0x90>
 8003db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dba:	9001      	str	r0, [sp, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8003dc2:	bfb8      	it	lt
 8003dc4:	18e4      	addlt	r4, r4, r3
 8003dc6:	f000 f913 	bl	8003ff0 <__malloc_lock>
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <_free_r+0x94>)
 8003dcc:	9801      	ldr	r0, [sp, #4]
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	b933      	cbnz	r3, 8003de0 <_free_r+0x30>
 8003dd2:	6063      	str	r3, [r4, #4]
 8003dd4:	6014      	str	r4, [r2, #0]
 8003dd6:	b003      	add	sp, #12
 8003dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ddc:	f000 b90e 	b.w	8003ffc <__malloc_unlock>
 8003de0:	42a3      	cmp	r3, r4
 8003de2:	d908      	bls.n	8003df6 <_free_r+0x46>
 8003de4:	6825      	ldr	r5, [r4, #0]
 8003de6:	1961      	adds	r1, r4, r5
 8003de8:	428b      	cmp	r3, r1
 8003dea:	bf01      	itttt	eq
 8003dec:	6819      	ldreq	r1, [r3, #0]
 8003dee:	685b      	ldreq	r3, [r3, #4]
 8003df0:	1949      	addeq	r1, r1, r5
 8003df2:	6021      	streq	r1, [r4, #0]
 8003df4:	e7ed      	b.n	8003dd2 <_free_r+0x22>
 8003df6:	461a      	mov	r2, r3
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b10b      	cbz	r3, 8003e00 <_free_r+0x50>
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	d9fa      	bls.n	8003df6 <_free_r+0x46>
 8003e00:	6811      	ldr	r1, [r2, #0]
 8003e02:	1855      	adds	r5, r2, r1
 8003e04:	42a5      	cmp	r5, r4
 8003e06:	d10b      	bne.n	8003e20 <_free_r+0x70>
 8003e08:	6824      	ldr	r4, [r4, #0]
 8003e0a:	4421      	add	r1, r4
 8003e0c:	1854      	adds	r4, r2, r1
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	d1e0      	bne.n	8003dd6 <_free_r+0x26>
 8003e14:	681c      	ldr	r4, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	4421      	add	r1, r4
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	e7da      	b.n	8003dd6 <_free_r+0x26>
 8003e20:	d902      	bls.n	8003e28 <_free_r+0x78>
 8003e22:	230c      	movs	r3, #12
 8003e24:	6003      	str	r3, [r0, #0]
 8003e26:	e7d6      	b.n	8003dd6 <_free_r+0x26>
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	1961      	adds	r1, r4, r5
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	bf04      	itt	eq
 8003e30:	6819      	ldreq	r1, [r3, #0]
 8003e32:	685b      	ldreq	r3, [r3, #4]
 8003e34:	6063      	str	r3, [r4, #4]
 8003e36:	bf04      	itt	eq
 8003e38:	1949      	addeq	r1, r1, r5
 8003e3a:	6021      	streq	r1, [r4, #0]
 8003e3c:	6054      	str	r4, [r2, #4]
 8003e3e:	e7ca      	b.n	8003dd6 <_free_r+0x26>
 8003e40:	b003      	add	sp, #12
 8003e42:	bd30      	pop	{r4, r5, pc}
 8003e44:	2000016c 	.word	0x2000016c

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0e      	ldr	r6, [pc, #56]	; (8003e84 <sbrk_aligned+0x3c>)
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	6831      	ldr	r1, [r6, #0]
 8003e50:	4605      	mov	r5, r0
 8003e52:	b911      	cbnz	r1, 8003e5a <sbrk_aligned+0x12>
 8003e54:	f000 f8bc 	bl	8003fd0 <_sbrk_r>
 8003e58:	6030      	str	r0, [r6, #0]
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f8b7 	bl	8003fd0 <_sbrk_r>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	d00a      	beq.n	8003e7c <sbrk_aligned+0x34>
 8003e66:	1cc4      	adds	r4, r0, #3
 8003e68:	f024 0403 	bic.w	r4, r4, #3
 8003e6c:	42a0      	cmp	r0, r4
 8003e6e:	d007      	beq.n	8003e80 <sbrk_aligned+0x38>
 8003e70:	1a21      	subs	r1, r4, r0
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f8ac 	bl	8003fd0 <_sbrk_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d101      	bne.n	8003e80 <sbrk_aligned+0x38>
 8003e7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e80:	4620      	mov	r0, r4
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	20000170 	.word	0x20000170

08003e88 <_malloc_r>:
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	1ccd      	adds	r5, r1, #3
 8003e8e:	f025 0503 	bic.w	r5, r5, #3
 8003e92:	3508      	adds	r5, #8
 8003e94:	2d0c      	cmp	r5, #12
 8003e96:	bf38      	it	cc
 8003e98:	250c      	movcc	r5, #12
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	db01      	blt.n	8003ea4 <_malloc_r+0x1c>
 8003ea0:	42a9      	cmp	r1, r5
 8003ea2:	d905      	bls.n	8003eb0 <_malloc_r+0x28>
 8003ea4:	230c      	movs	r3, #12
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	4630      	mov	r0, r6
 8003eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb0:	4e2e      	ldr	r6, [pc, #184]	; (8003f6c <_malloc_r+0xe4>)
 8003eb2:	f000 f89d 	bl	8003ff0 <__malloc_lock>
 8003eb6:	6833      	ldr	r3, [r6, #0]
 8003eb8:	461c      	mov	r4, r3
 8003eba:	bb34      	cbnz	r4, 8003f0a <_malloc_r+0x82>
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f7ff ffc2 	bl	8003e48 <sbrk_aligned>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	d14d      	bne.n	8003f66 <_malloc_r+0xde>
 8003eca:	6834      	ldr	r4, [r6, #0]
 8003ecc:	4626      	mov	r6, r4
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	d140      	bne.n	8003f54 <_malloc_r+0xcc>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	eb04 0803 	add.w	r8, r4, r3
 8003edc:	f000 f878 	bl	8003fd0 <_sbrk_r>
 8003ee0:	4580      	cmp	r8, r0
 8003ee2:	d13a      	bne.n	8003f5a <_malloc_r+0xd2>
 8003ee4:	6821      	ldr	r1, [r4, #0]
 8003ee6:	3503      	adds	r5, #3
 8003ee8:	1a6d      	subs	r5, r5, r1
 8003eea:	f025 0503 	bic.w	r5, r5, #3
 8003eee:	3508      	adds	r5, #8
 8003ef0:	2d0c      	cmp	r5, #12
 8003ef2:	bf38      	it	cc
 8003ef4:	250c      	movcc	r5, #12
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7ff ffa5 	bl	8003e48 <sbrk_aligned>
 8003efe:	3001      	adds	r0, #1
 8003f00:	d02b      	beq.n	8003f5a <_malloc_r+0xd2>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	442b      	add	r3, r5
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	e00e      	b.n	8003f28 <_malloc_r+0xa0>
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	1b52      	subs	r2, r2, r5
 8003f0e:	d41e      	bmi.n	8003f4e <_malloc_r+0xc6>
 8003f10:	2a0b      	cmp	r2, #11
 8003f12:	d916      	bls.n	8003f42 <_malloc_r+0xba>
 8003f14:	1961      	adds	r1, r4, r5
 8003f16:	42a3      	cmp	r3, r4
 8003f18:	6025      	str	r5, [r4, #0]
 8003f1a:	bf18      	it	ne
 8003f1c:	6059      	strne	r1, [r3, #4]
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	bf08      	it	eq
 8003f22:	6031      	streq	r1, [r6, #0]
 8003f24:	5162      	str	r2, [r4, r5]
 8003f26:	604b      	str	r3, [r1, #4]
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f104 060b 	add.w	r6, r4, #11
 8003f2e:	f000 f865 	bl	8003ffc <__malloc_unlock>
 8003f32:	f026 0607 	bic.w	r6, r6, #7
 8003f36:	1d23      	adds	r3, r4, #4
 8003f38:	1af2      	subs	r2, r6, r3
 8003f3a:	d0b6      	beq.n	8003eaa <_malloc_r+0x22>
 8003f3c:	1b9b      	subs	r3, r3, r6
 8003f3e:	50a3      	str	r3, [r4, r2]
 8003f40:	e7b3      	b.n	8003eaa <_malloc_r+0x22>
 8003f42:	6862      	ldr	r2, [r4, #4]
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	bf0c      	ite	eq
 8003f48:	6032      	streq	r2, [r6, #0]
 8003f4a:	605a      	strne	r2, [r3, #4]
 8003f4c:	e7ec      	b.n	8003f28 <_malloc_r+0xa0>
 8003f4e:	4623      	mov	r3, r4
 8003f50:	6864      	ldr	r4, [r4, #4]
 8003f52:	e7b2      	b.n	8003eba <_malloc_r+0x32>
 8003f54:	4634      	mov	r4, r6
 8003f56:	6876      	ldr	r6, [r6, #4]
 8003f58:	e7b9      	b.n	8003ece <_malloc_r+0x46>
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4638      	mov	r0, r7
 8003f60:	f000 f84c 	bl	8003ffc <__malloc_unlock>
 8003f64:	e7a1      	b.n	8003eaa <_malloc_r+0x22>
 8003f66:	6025      	str	r5, [r4, #0]
 8003f68:	e7de      	b.n	8003f28 <_malloc_r+0xa0>
 8003f6a:	bf00      	nop
 8003f6c:	2000016c 	.word	0x2000016c

08003f70 <_realloc_r>:
 8003f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f74:	4680      	mov	r8, r0
 8003f76:	4614      	mov	r4, r2
 8003f78:	460e      	mov	r6, r1
 8003f7a:	b921      	cbnz	r1, 8003f86 <_realloc_r+0x16>
 8003f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	4611      	mov	r1, r2
 8003f82:	f7ff bf81 	b.w	8003e88 <_malloc_r>
 8003f86:	b92a      	cbnz	r2, 8003f94 <_realloc_r+0x24>
 8003f88:	f7ff ff12 	bl	8003db0 <_free_r>
 8003f8c:	4625      	mov	r5, r4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f94:	f000 f838 	bl	8004008 <_malloc_usable_size_r>
 8003f98:	4284      	cmp	r4, r0
 8003f9a:	4607      	mov	r7, r0
 8003f9c:	d802      	bhi.n	8003fa4 <_realloc_r+0x34>
 8003f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fa2:	d812      	bhi.n	8003fca <_realloc_r+0x5a>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	f7ff ff6e 	bl	8003e88 <_malloc_r>
 8003fac:	4605      	mov	r5, r0
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d0ed      	beq.n	8003f8e <_realloc_r+0x1e>
 8003fb2:	42bc      	cmp	r4, r7
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	bf28      	it	cs
 8003fba:	463a      	movcs	r2, r7
 8003fbc:	f7ff fed0 	bl	8003d60 <memcpy>
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	f7ff fef4 	bl	8003db0 <_free_r>
 8003fc8:	e7e1      	b.n	8003f8e <_realloc_r+0x1e>
 8003fca:	4635      	mov	r5, r6
 8003fcc:	e7df      	b.n	8003f8e <_realloc_r+0x1e>
	...

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d06      	ldr	r5, [pc, #24]	; (8003fec <_sbrk_r+0x1c>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc fd54 	bl	8000a88 <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000174 	.word	0x20000174

08003ff0 <__malloc_lock>:
 8003ff0:	4801      	ldr	r0, [pc, #4]	; (8003ff8 <__malloc_lock+0x8>)
 8003ff2:	f000 b811 	b.w	8004018 <__retarget_lock_acquire_recursive>
 8003ff6:	bf00      	nop
 8003ff8:	20000178 	.word	0x20000178

08003ffc <__malloc_unlock>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <__malloc_unlock+0x8>)
 8003ffe:	f000 b80c 	b.w	800401a <__retarget_lock_release_recursive>
 8004002:	bf00      	nop
 8004004:	20000178 	.word	0x20000178

08004008 <_malloc_usable_size_r>:
 8004008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400c:	1f18      	subs	r0, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	bfbc      	itt	lt
 8004012:	580b      	ldrlt	r3, [r1, r0]
 8004014:	18c0      	addlt	r0, r0, r3
 8004016:	4770      	bx	lr

08004018 <__retarget_lock_acquire_recursive>:
 8004018:	4770      	bx	lr

0800401a <__retarget_lock_release_recursive>:
 800401a:	4770      	bx	lr

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
