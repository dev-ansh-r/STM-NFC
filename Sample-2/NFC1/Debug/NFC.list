
NFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005120  08005120  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005128  08005128  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005128  08005128  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080051a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080051a0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb3c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f23  00000000  00000000  0002ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000317e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021037  00000000  00000000  000323e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa73  00000000  00000000  0005341f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c367d  00000000  00000000  00062e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012650f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  00126560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004fa8 	.word	0x08004fa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004fa8 	.word	0x08004fa8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sendNCICommand>:
/* Constants */
#define NFC_CLICK_ADDRESS 0x28  // Replace with the correct address of NFC Click

/* Function to send NCI command to NFC Click */
uint8_t sendNCICommand(uint8_t *command, uint8_t commandSize, uint8_t *response, uint16_t *responseSize)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af02      	add	r7, sp, #8
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	607a      	str	r2, [r7, #4]
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	460b      	mov	r3, r1
 8000592:	72fb      	strb	r3, [r7, #11]
  if (HAL_I2C_Master_Transmit(&hi2c1, NFC_CLICK_ADDRESS<<1, command, commandSize, HAL_MAX_DELAY) != HAL_OK)
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	b29b      	uxth	r3, r3
 8000598:	f04f 32ff 	mov.w	r2, #4294967295
 800059c:	9200      	str	r2, [sp, #0]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	2150      	movs	r1, #80	; 0x50
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <sendNCICommand+0x58>)
 80005a4:	f000 fffc 	bl	80015a0 <HAL_I2C_Master_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <sendNCICommand+0x2e>
    return 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e00f      	b.n	80005d2 <sendNCICommand+0x4e>

  if (HAL_I2C_Master_Receive(&hi2c1, NFC_CLICK_ADDRESS<<1|1, response, *responseSize, HAL_MAX_DELAY) != HAL_OK)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	f04f 32ff 	mov.w	r2, #4294967295
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	2151      	movs	r1, #81	; 0x51
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <sendNCICommand+0x58>)
 80005c2:	f001 f8e1 	bl	8001788 <HAL_I2C_Master_Receive>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <sendNCICommand+0x4c>
    return 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	e000      	b.n	80005d2 <sendNCICommand+0x4e>

  return 1;
 80005d0:	2301      	movs	r3, #1
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <nfc_hal_delay>:

/* Function to delay in milliseconds */
void nfc_hal_delay(uint32_t milliseconds)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(milliseconds);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 fca3 	bl	8000f34 <HAL_Delay>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <initialize_core>:

int initialize_core(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0b6      	sub	sp, #216	; 0xd8
 80005fc:	af00      	add	r7, sp, #0
  uint8_t answer[200] = {0};
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	22c4      	movs	r2, #196	; 0xc4
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fc56 	bl	8003ebc <memset>
  uint16_t answer_size = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	817b      	strh	r3, [r7, #10]
  int i = 10;
 8000614:	230a      	movs	r3, #10
 8000616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  uint8_t CORE_RESET_CMD[] = {0x20, 0x00, 0x01, 0x01};
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <initialize_core+0xa8>)
 800061c:	607b      	str	r3, [r7, #4]
  uint8_t CORE_INIT_CMD[] = {0x20, 0x01, 0x00};
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <initialize_core+0xac>)
 8000620:	463b      	mov	r3, r7
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	4611      	mov	r1, r2
 8000626:	8019      	strh	r1, [r3, #0]
 8000628:	3302      	adds	r3, #2
 800062a:	0c12      	lsrs	r2, r2, #16
 800062c:	701a      	strb	r2, [r3, #0]

#if defined(DEBUG)
  printf("\r\n***** Resetting and Initializing Core *****\r\n");
 800062e:	481e      	ldr	r0, [pc, #120]	; (80006a8 <initialize_core+0xb0>)
 8000630:	f003 fcba 	bl	8003fa8 <puts>
#endif

  /* Reset the core */
  while (sendNCICommand(CORE_RESET_CMD, sizeof(CORE_RESET_CMD), answer, &answer_size))
 8000634:	e00c      	b.n	8000650 <initialize_core+0x58>
  {
    if (!i--)
 8000636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000640:	2b00      	cmp	r3, #0
 8000642:	d101      	bne.n	8000648 <initialize_core+0x50>
      return 0;
 8000644:	2300      	movs	r3, #0
 8000646:	e027      	b.n	8000698 <initialize_core+0xa0>

    nfc_hal_delay(500);
 8000648:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064c:	f7ff ffc8 	bl	80005e0 <nfc_hal_delay>
  while (sendNCICommand(CORE_RESET_CMD, sizeof(CORE_RESET_CMD), answer, &answer_size))
 8000650:	f107 030a 	add.w	r3, r7, #10
 8000654:	f107 020c 	add.w	r2, r7, #12
 8000658:	1d38      	adds	r0, r7, #4
 800065a:	2104      	movs	r1, #4
 800065c:	f7ff ff92 	bl	8000584 <sendNCICommand>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1e7      	bne.n	8000636 <initialize_core+0x3e>
  }

  /* Once reset, initialize the core */
  if (sendNCICommand(CORE_INIT_CMD, sizeof(CORE_INIT_CMD), answer, &answer_size))
 8000666:	f107 030a 	add.w	r3, r7, #10
 800066a:	f107 020c 	add.w	r2, r7, #12
 800066e:	4638      	mov	r0, r7
 8000670:	2103      	movs	r1, #3
 8000672:	f7ff ff87 	bl	8000584 <sendNCICommand>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <initialize_core+0x88>
    return 0;
 800067c:	2300      	movs	r3, #0
 800067e:	e00b      	b.n	8000698 <initialize_core+0xa0>
  else if ((answer[0] != 0x40) || (answer[1] != 0x01) || (answer[3] != 0x00))
 8000680:	7b3b      	ldrb	r3, [r7, #12]
 8000682:	2b40      	cmp	r3, #64	; 0x40
 8000684:	d105      	bne.n	8000692 <initialize_core+0x9a>
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d102      	bne.n	8000692 <initialize_core+0x9a>
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <initialize_core+0x9e>
    return 0;
 8000692:	2300      	movs	r3, #0
 8000694:	e000      	b.n	8000698 <initialize_core+0xa0>

  return 1;
 8000696:	2301      	movs	r3, #1
}
 8000698:	4618      	mov	r0, r3
 800069a:	37d8      	adds	r7, #216	; 0xd8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	01010020 	.word	0x01010020
 80006a4:	08004ff0 	.word	0x08004ff0
 80006a8:	08004fc0 	.word	0x08004fc0

080006ac <main>:


int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b092      	sub	sp, #72	; 0x48
 80006b0:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fbca 	bl	8000e4a <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f8b7 	bl	8000828 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f987 	bl	80009cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006be:	f000 f955 	bl	800096c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006c2:	f000 f913 	bl	80008ec <MX_I2C1_Init>

  /*Initialize core*/
  if (initialize_core() != 1)
 80006c6:	f7ff ff97 	bl	80005f8 <initialize_core>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d00b      	beq.n	80006e8 <main+0x3c>
  {
    printf("Error initializing core\r\n");
 80006d0:	484d      	ldr	r0, [pc, #308]	; (8000808 <main+0x15c>)
 80006d2:	f003 fc69 	bl	8003fa8 <puts>
    HAL_UART_Transmit(&huart2, "Error initializing core\r\n", strlen("Error initializing core\r\n"), HAL_MAX_DELAY);
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	2219      	movs	r2, #25
 80006dc:	494b      	ldr	r1, [pc, #300]	; (800080c <main+0x160>)
 80006de:	484c      	ldr	r0, [pc, #304]	; (8000810 <main+0x164>)
 80006e0:	f002 ff52 	bl	8003588 <HAL_UART_Transmit>
    return 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e08b      	b.n	8000800 <main+0x154>
  /* OUR CODE BEGIN WHILE */
  while (1)
    {
      uint8_t dataBuffer[32];  // Buffer to store the received data

      if(HAL_I2C_IsDeviceReady(&hi2c1, (NFC_CLICK_ADDRESS<<1), 2, 100) == HAL_OK)
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	2202      	movs	r2, #2
 80006ec:	2150      	movs	r1, #80	; 0x50
 80006ee:	4849      	ldr	r0, [pc, #292]	; (8000814 <main+0x168>)
 80006f0:	f001 f940 	bl	8001974 <HAL_I2C_IsDeviceReady>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d15e      	bne.n	80007b8 <main+0x10c>
      {
      HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80006fa:	2108      	movs	r1, #8
 80006fc:	4846      	ldr	r0, [pc, #280]	; (8000818 <main+0x16c>)
 80006fe:	f000 fea5 	bl	800144c <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 8000702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000706:	f000 fc15 	bl	8000f34 <HAL_Delay>
      // Read data from NFC Click via I2C
      if (HAL_I2C_Master_Receive(&hi2c1, (NFC_CLICK_ADDRESS<<1 | 1), dataBuffer, sizeof(dataBuffer), HAL_MAX_DELAY) == HAL_OK)
 800070a:	1d3a      	adds	r2, r7, #4
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2320      	movs	r3, #32
 8000714:	2151      	movs	r1, #81	; 0x51
 8000716:	483f      	ldr	r0, [pc, #252]	; (8000814 <main+0x168>)
 8000718:	f001 f836 	bl	8001788 <HAL_I2C_Master_Receive>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d129      	bne.n	8000776 <main+0xca>
      {
        // Print the received data to the serial monitor
        for (int i = 0; i < sizeof(dataBuffer); i++)
 8000722:	2300      	movs	r3, #0
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000726:	e01b      	b.n	8000760 <main+0xb4>
        {
          char uartBuffer[8];  // Buffer to store the converted data

          // Convert the data to ASCII and print it
          sprintf(uartBuffer, "%02X ", dataBuffer[i]);
 8000728:	1d3a      	adds	r2, r7, #4
 800072a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000736:	4939      	ldr	r1, [pc, #228]	; (800081c <main+0x170>)
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fc3d 	bl	8003fb8 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800073e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd44 	bl	80001d0 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	482e      	ldr	r0, [pc, #184]	; (8000810 <main+0x164>)
 8000756:	f002 ff17 	bl	8003588 <HAL_UART_Transmit>
        for (int i = 0; i < sizeof(dataBuffer); i++)
 800075a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075c:	3301      	adds	r3, #1
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000762:	2b1f      	cmp	r3, #31
 8000764:	d9e0      	bls.n	8000728 <main+0x7c>
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Print a new line
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2202      	movs	r2, #2
 800076c:	492c      	ldr	r1, [pc, #176]	; (8000820 <main+0x174>)
 800076e:	4828      	ldr	r0, [pc, #160]	; (8000810 <main+0x164>)
 8000770:	f002 ff0a 	bl	8003588 <HAL_UART_Transmit>
 8000774:	e01b      	b.n	80007ae <main+0x102>
      }else{
            char uartBuffer[8];
            sprintf(uartBuffer, "%02X ", 0);
 8000776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077a:	2200      	movs	r2, #0
 800077c:	4927      	ldr	r1, [pc, #156]	; (800081c <main+0x170>)
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fc1a 	bl	8003fb8 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8000784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd21 	bl	80001d0 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	481d      	ldr	r0, [pc, #116]	; (8000810 <main+0x164>)
 800079c:	f002 fef4 	bl	8003588 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);  // Print a new line
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	2202      	movs	r2, #2
 80007a6:	491e      	ldr	r1, [pc, #120]	; (8000820 <main+0x174>)
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <main+0x164>)
 80007aa:	f002 feed 	bl	8003588 <HAL_UART_Transmit>
          }

      HAL_Delay(1000);  // Delay for 1 second between readings
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f000 fbbf 	bl	8000f34 <HAL_Delay>
 80007b6:	e797      	b.n	80006e8 <main+0x3c>
    }else{
      char i2cBuffer[8];
      sprintf(i2cBuffer, "%02X", 2);
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	2202      	movs	r2, #2
 80007be:	4919      	ldr	r1, [pc, #100]	; (8000824 <main+0x178>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fbf9 	bl	8003fb8 <siprintf>
      HAL_UART_Transmit(&huart2,(uint8_t*)i2cBuffer, strlen(i2cBuffer), HAL_MAX_DELAY);
 80007c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd00 	bl	80001d0 <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <main+0x164>)
 80007de:	f002 fed3 	bl	8003588 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2,(uint8_t*)i2cBuffer, strlen(i2cBuffer), HAL_MAX_DELAY);
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcf2 	bl	80001d0 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <main+0x164>)
 80007fa:	f002 fec5 	bl	8003588 <HAL_UART_Transmit>
    {
 80007fe:	e773      	b.n	80006e8 <main+0x3c>
    }

  }
}
 8000800:	4618      	mov	r0, r3
 8000802:	3740      	adds	r7, #64	; 0x40
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	08004ff4 	.word	0x08004ff4
 800080c:	08005010 	.word	0x08005010
 8000810:	200000e0 	.word	0x200000e0
 8000814:	2000008c 	.word	0x2000008c
 8000818:	48000400 	.word	0x48000400
 800081c:	0800502c 	.word	0x0800502c
 8000820:	08005034 	.word	0x08005034
 8000824:	08005038 	.word	0x08005038

08000828 <SystemClock_Config>:

/*  System Clock Configuration  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	2244      	movs	r2, #68	; 0x44
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fb40 	bl	8003ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800084e:	f001 fcc7 	bl	80021e0 <HAL_PWREx_ControlVoltageScaling>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000858:	f000 f902 	bl	8000a60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800085c:	f001 fca2 	bl	80021a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000860:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <SystemClock_Config+0xc0>)
 8000862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000866:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <SystemClock_Config+0xc0>)
 8000868:	f023 0318 	bic.w	r3, r3, #24
 800086c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000870:	2314      	movs	r3, #20
 8000872:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000880:	2360      	movs	r3, #96	; 0x60
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000888:	2301      	movs	r3, #1
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000890:	2310      	movs	r3, #16
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000894:	2307      	movs	r3, #7
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fcf1 	bl	800228c <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008b0:	f000 f8d6 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2303      	movs	r3, #3
 80008ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	2101      	movs	r1, #1
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f8f1 	bl	8002ab4 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008d8:	f000 f8c2 	bl	8000a60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008dc:	f002 fd04 	bl	80032e8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e0:	bf00      	nop
 80008e2:	3758      	adds	r7, #88	; 0x58
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000

080008ec <MX_I2C1_Init>:

/** I2C1 Initialization Function */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <MX_I2C1_Init+0x74>)
 8000928:	f000 fdaa 	bl	8001480 <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 f895 	bl	8000a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <MX_I2C1_Init+0x74>)
 800093a:	f001 fb9b 	bl	8002074 <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 f88c 	bl	8000a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_I2C1_Init+0x74>)
 800094c:	f001 fbdd 	bl	800210a <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f883 	bl	8000a60 <Error_Handler>
  }

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000008c 	.word	0x2000008c
 8000964:	40005400 	.word	0x40005400
 8000968:	00707cbb 	.word	0x00707cbb

0800096c <MX_USART2_UART_Init>:

/* USART2 Initialization Function   */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009b0:	f002 fd9c 	bl	80034ec <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f851 	bl	8000a60 <Error_Handler>
  }

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000e0 	.word	0x200000e0
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_GPIO_Init>:

/* GPIO Initialization Function   */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_GPIO_Init+0x8c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_GPIO_Init+0x8c>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_GPIO_Init+0x8c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_GPIO_Init+0x8c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <MX_GPIO_Init+0x8c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_GPIO_Init+0x8c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_GPIO_Init+0x8c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <MX_GPIO_Init+0x8c>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_GPIO_Init+0x8c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <MX_GPIO_Init+0x90>)
 8000a30:	f000 fcf4 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a34:	2308      	movs	r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0x90>)
 8000a4c:	f000 fb7c 	bl	8001148 <HAL_GPIO_Init>

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000400 	.word	0x48000400

08000a60 <Error_Handler>:

/* This function is executed in case of error occurrence */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09e      	sub	sp, #120	; 0x78
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2254      	movs	r2, #84	; 0x54
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 f9f1 	bl	8003ebc <memset>
  if(hi2c->Instance==I2C1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d137      	bne.n	8000b54 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fa03 	bl	8002efc <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ffb0 	bl	8000a60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b04:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fb06 	bl	8001148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b46:	6593      	str	r3, [r2, #88]	; 0x58
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3778      	adds	r7, #120	; 0x78
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09e      	sub	sp, #120	; 0x78
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2254      	movs	r2, #84	; 0x54
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 f999 	bl	8003ebc <memset>
  if(huart->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <HAL_UART_MspInit+0xcc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d148      	bne.n	8000c26 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f002 f9ab 	bl	8002efc <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff ff58 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_UART_MspInit+0xd0>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <HAL_UART_MspInit+0xd0>)
 8000bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bba:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <HAL_UART_MspInit+0xd0>)
 8000bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_UART_MspInit+0xd0>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0xd0>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0xd0>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000be0:	2304      	movs	r3, #4
 8000be2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 faa3 	bl	8001148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c14:	2303      	movs	r3, #3
 8000c16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 fa91 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3778      	adds	r7, #120	; 0x78
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40021000 	.word	0x40021000

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c84:	f000 f936 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
  }

  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
  }
  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
  return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f003 f866 	bl	8003e68 <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20010000 	.word	0x20010000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20000164 	.word	0x20000164
 8000dd0:	20000180 	.word	0x20000180

08000dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f003 f825 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fc3f 	bl	80006ac <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e3c:	08005130 	.word	0x08005130
  ldr r2, =_sbss
 8000e40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e44:	2000017c 	.word	0x2000017c

08000e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_IRQHandler>

08000e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f943 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f80e 	bl	8000e7c <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6c:	f7ff fdfe 	bl	8000a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_InitTick+0x70>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f941 	bl	800112e <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10f      	bne.n	8000ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d809      	bhi.n	8000ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f919 	bl	80010f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_InitTick+0x74>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e007      	b.n	8000edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e004      	b.n	8000edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e001      	b.n	8000edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000168 	.word	0x20000168

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000168 	.word	0x20000168

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff47 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5c 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e148      	b.n	80013ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 813a 	beq.w	80013e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_GPIO_Init+0x40>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d017      	beq.n	8001226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d123      	bne.n	800127a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	6939      	ldr	r1, [r7, #16]
 8001276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0203 	and.w	r2, r3, #3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8094 	beq.w	80013e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80012be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c0:	4a51      	ldr	r2, [pc, #324]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6613      	str	r3, [r2, #96]	; 0x60
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x2c0>)
 80012ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d4:	4a4d      	ldr	r2, [pc, #308]	; (800140c <HAL_GPIO_Init+0x2c4>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fe:	d00d      	beq.n	800131c <HAL_GPIO_Init+0x1d4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a43      	ldr	r2, [pc, #268]	; (8001410 <HAL_GPIO_Init+0x2c8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d007      	beq.n	8001318 <HAL_GPIO_Init+0x1d0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_GPIO_Init+0x2cc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d101      	bne.n	8001314 <HAL_GPIO_Init+0x1cc>
 8001310:	2302      	movs	r3, #2
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1d6>
 8001314:	2307      	movs	r3, #7
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1d6>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1d6>
 800131c:	2300      	movs	r3, #0
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132e:	4937      	ldr	r1, [pc, #220]	; (800140c <HAL_GPIO_Init+0x2c4>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001360:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_GPIO_Init+0x2d0>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f aeaf 	bne.w	8001158 <HAL_GPIO_Init+0x10>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	48000400 	.word	0x48000400
 8001414:	48000800 	.word	0x48000800
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001438:	e002      	b.n	8001440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43d9      	mvns	r1, r3
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	400b      	ands	r3, r1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e081      	b.n	8001596 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fb04 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2224      	movs	r2, #36	; 0x24
 80014b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	e006      	b.n	8001508 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001506:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d104      	bne.n	800151a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001518:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800153c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69d9      	ldr	r1, [r3, #28]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2220      	movs	r2, #32
 8001582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	461a      	mov	r2, r3
 80015ac:	460b      	mov	r3, r1
 80015ae:	817b      	strh	r3, [r7, #10]
 80015b0:	4613      	mov	r3, r2
 80015b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b20      	cmp	r3, #32
 80015be:	f040 80da 	bne.w	8001776 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_I2C_Master_Transmit+0x30>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e0d3      	b.n	8001778 <HAL_I2C_Master_Transmit+0x1d8>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015d8:	f7ff fca0 	bl	8000f1c <HAL_GetTick>
 80015dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2319      	movs	r3, #25
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 faed 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0be      	b.n	8001778 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2221      	movs	r2, #33	; 0x21
 80015fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2210      	movs	r2, #16
 8001606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	893a      	ldrh	r2, [r7, #8]
 800161a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	2bff      	cmp	r3, #255	; 0xff
 800162a:	d90e      	bls.n	800164a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	22ff      	movs	r2, #255	; 0xff
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	b2da      	uxtb	r2, r3
 8001638:	8979      	ldrh	r1, [r7, #10]
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_I2C_Master_Transmit+0x1e0>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 fce4 	bl	8002010 <I2C_TransferConfig>
 8001648:	e06c      	b.n	8001724 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	b2da      	uxtb	r2, r3
 800165a:	8979      	ldrh	r1, [r7, #10]
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <HAL_I2C_Master_Transmit+0x1e0>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 fcd3 	bl	8002010 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800166a:	e05b      	b.n	8001724 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	6a39      	ldr	r1, [r7, #32]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 faea 	bl	8001c4a <I2C_WaitOnTXISFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e07b      	b.n	8001778 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d034      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x184>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d130      	bne.n	8001724 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2200      	movs	r2, #0
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 fa7c 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e04d      	b.n	8001778 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2bff      	cmp	r3, #255	; 0xff
 80016e4:	d90e      	bls.n	8001704 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	8979      	ldrh	r1, [r7, #10]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fc87 	bl	8002010 <I2C_TransferConfig>
 8001702:	e00f      	b.n	8001724 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8979      	ldrh	r1, [r7, #10]
 8001716:	2300      	movs	r3, #0
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fc76 	bl	8002010 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29b      	uxth	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d19e      	bne.n	800166c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	6a39      	ldr	r1, [r7, #32]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fac9 	bl	8001cca <I2C_WaitOnSTOPFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e01a      	b.n	8001778 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2220      	movs	r2, #32
 8001748:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_I2C_Master_Transmit+0x1e4>)
 8001756:	400b      	ands	r3, r1
 8001758:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001776:	2302      	movs	r3, #2
  }
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	80002000 	.word	0x80002000
 8001784:	fe00e800 	.word	0xfe00e800

08001788 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	460b      	mov	r3, r1
 8001796:	817b      	strh	r3, [r7, #10]
 8001798:	4613      	mov	r3, r2
 800179a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	f040 80db 	bne.w	8001960 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_I2C_Master_Receive+0x30>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e0d4      	b.n	8001962 <HAL_I2C_Master_Receive+0x1da>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017c0:	f7ff fbac 	bl	8000f1c <HAL_GetTick>
 80017c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2319      	movs	r3, #25
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f9f9 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0bf      	b.n	8001962 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2222      	movs	r2, #34	; 0x22
 80017e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2210      	movs	r2, #16
 80017ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d90e      	bls.n	8001832 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	22ff      	movs	r2, #255	; 0xff
 8001818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	b2da      	uxtb	r2, r3
 8001820:	8979      	ldrh	r1, [r7, #10]
 8001822:	4b52      	ldr	r3, [pc, #328]	; (800196c <HAL_I2C_Master_Receive+0x1e4>)
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 fbf0 	bl	8002010 <I2C_TransferConfig>
 8001830:	e06d      	b.n	800190e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	b2da      	uxtb	r2, r3
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_I2C_Master_Receive+0x1e4>)
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fbdf 	bl	8002010 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001852:	e05c      	b.n	800190e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 fa73 	bl	8001d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e07c      	b.n	8001962 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d034      	beq.n	800190e <HAL_I2C_Master_Receive+0x186>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d130      	bne.n	800190e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f987 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e04d      	b.n	8001962 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d90e      	bls.n	80018ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	8979      	ldrh	r1, [r7, #10]
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fb92 	bl	8002010 <I2C_TransferConfig>
 80018ec:	e00f      	b.n	800190e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	8979      	ldrh	r1, [r7, #10]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fb81 	bl	8002010 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d19d      	bne.n	8001854 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	6a39      	ldr	r1, [r7, #32]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f9d4 	bl	8001cca <I2C_WaitOnSTOPFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e01a      	b.n	8001962 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2220      	movs	r2, #32
 8001932:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_I2C_Master_Receive+0x1e8>)
 8001940:	400b      	ands	r3, r1
 8001942:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	e000      	b.n	8001962 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
  }
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	80002400 	.word	0x80002400
 8001970:	fe00e800 	.word	0xfe00e800

08001974 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b20      	cmp	r3, #32
 8001992:	f040 80f1 	bne.w	8001b78 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a4:	d101      	bne.n	80019aa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0e7      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_IsDeviceReady+0x44>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0e0      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2224      	movs	r2, #36	; 0x24
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d107      	bne.n	80019e6 <HAL_I2C_IsDeviceReady+0x72>
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e4:	e004      	b.n	80019f0 <HAL_I2C_IsDeviceReady+0x7c>
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff fa91 	bl	8000f1c <HAL_GetTick>
 80019fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	bf0c      	ite	eq
 8001a0a:	2301      	moveq	r3, #1
 8001a0c:	2300      	movne	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a28:	e034      	b.n	8001a94 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d01a      	beq.n	8001a68 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a32:	f7ff fa73 	bl	8000f1c <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d302      	bcc.n	8001a48 <HAL_I2C_IsDeviceReady+0xd4>
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e088      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_I2C_IsDeviceReady+0x12c>
 8001a9a:	7fbb      	ldrb	r3, [r7, #30]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0c4      	beq.n	8001a2a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d01a      	beq.n	8001ae4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f886 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e058      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2220      	movs	r2, #32
 8001ace:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e04a      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	2120      	movs	r1, #32
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f86b 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e03d      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2210      	movs	r2, #16
 8001b04:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d118      	bne.n	8001b48 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b24:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2120      	movs	r1, #32
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 f84a 	bl	8001bca <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e01c      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2220      	movs	r2, #32
 8001b46:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	f63f af3b 	bhi.w	80019ce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d103      	bne.n	8001ba0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d007      	beq.n	8001bbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	619a      	str	r2, [r3, #24]
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bda:	e022      	b.n	8001c22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d01e      	beq.n	8001c22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be4:	f7ff f99a 	bl	8000f1c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d302      	bcc.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d113      	bne.n	8001c22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d0cd      	beq.n	8001bdc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c56:	e02c      	b.n	8001cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f8eb 	bl	8001e38 <I2C_IsErrorOccurred>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e02a      	b.n	8001cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d01e      	beq.n	8001cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c74:	f7ff f952 	bl	8000f1c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d302      	bcc.n	8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d113      	bne.n	8001cb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f043 0220 	orr.w	r2, r3, #32
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e007      	b.n	8001cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d1cb      	bne.n	8001c58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd6:	e028      	b.n	8001d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f8ab 	bl	8001e38 <I2C_IsErrorOccurred>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e026      	b.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cec:	f7ff f916 	bl	8000f1c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d302      	bcc.n	8001d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d113      	bne.n	8001d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f043 0220 	orr.w	r2, r3, #32
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e007      	b.n	8001d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d1cf      	bne.n	8001cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d50:	e064      	b.n	8001e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f86e 	bl	8001e38 <I2C_IsErrorOccurred>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e062      	b.n	8001e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d138      	bne.n	8001de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d105      	bne.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e04e      	b.n	8001e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d107      	bne.n	8001dac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2210      	movs	r2, #16
 8001da2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2204      	movs	r2, #4
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
 8001daa:	e002      	b.n	8001db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e022      	b.n	8001e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7ff f899 	bl	8000f1c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10f      	bne.n	8001e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	f043 0220 	orr.w	r2, r3, #32
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e007      	b.n	8001e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d193      	bne.n	8001d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	fe00e800 	.word	0xfe00e800

08001e38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d075      	beq.n	8001f50 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2210      	movs	r2, #16
 8001e6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e6c:	e056      	b.n	8001f1c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d052      	beq.n	8001f1c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff f851 	bl	8000f1c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <I2C_IsErrorOccurred+0x54>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d147      	bne.n	8001f1c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eae:	d12e      	bne.n	8001f0e <I2C_IsErrorOccurred+0xd6>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001eb6:	d02a      	beq.n	8001f0e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d027      	beq.n	8001f0e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ecc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ece:	f7ff f825 	bl	8000f1c <HAL_GetTick>
 8001ed2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ed4:	e01b      	b.n	8001f0e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ed6:	f7ff f821 	bl	8000f1c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b19      	cmp	r3, #25
 8001ee2:	d914      	bls.n	8001f0e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d1dc      	bne.n	8001ed6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d003      	beq.n	8001f32 <I2C_IsErrorOccurred+0xfa>
 8001f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d09d      	beq.n	8001e6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01c      	beq.n	8002000 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff fddb 	bl	8001b82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <I2C_IsErrorOccurred+0x1d4>)
 8001fd8:	400b      	ands	r3, r1
 8001fda:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	fe00e800 	.word	0xfe00e800

08002010 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	817b      	strh	r3, [r7, #10]
 800201e:	4613      	mov	r3, r2
 8002020:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002028:	7a7b      	ldrb	r3, [r7, #9]
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002030:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	4313      	orrs	r3, r2
 800203a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800203e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	0d5b      	lsrs	r3, r3, #21
 800204a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <I2C_TransferConfig+0x60>)
 8002050:	430b      	orrs	r3, r1
 8002052:	43db      	mvns	r3, r3
 8002054:	ea02 0103 	and.w	r1, r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	03ff63ff 	.word	0x03ff63ff

08002074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	d138      	bne.n	80020fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002094:	2302      	movs	r3, #2
 8002096:	e032      	b.n	80020fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2224      	movs	r2, #36	; 0x24
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b20      	cmp	r3, #32
 800211e:	d139      	bne.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800212a:	2302      	movs	r3, #2
 800212c:	e033      	b.n	8002196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2224      	movs	r2, #36	; 0x24
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800215c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e000      	b.n	8002196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002194:	2302      	movs	r3, #2
  }
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000

080021c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <HAL_PWREx_GetVoltageRange+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ee:	d130      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d038      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2232      	movs	r2, #50	; 0x32
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002224:	e002      	b.n	800222c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002238:	d102      	bne.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f2      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224c:	d110      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e00f      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d007      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40007000 	.word	0x40007000
 8002284:	20000000 	.word	0x20000000
 8002288:	431bde83 	.word	0x431bde83

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f000 bc02 	b.w	8002aa4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a0:	4b96      	ldr	r3, [pc, #600]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022aa:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80e4 	beq.w	800248a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4c>
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	f040 808b 	bne.w	80023e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 8087 	bne.w	80023e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022d8:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x64>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e3d9      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <HAL_RCC_OscConfig+0x7e>
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	e005      	b.n	8002316 <HAL_RCC_OscConfig+0x8a>
 800230a:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002316:	4293      	cmp	r3, r2
 8002318:	d223      	bcs.n	8002362 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd8c 	bl	8002e3c <RCC_SetFlashLatencyFromMSIRange>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3ba      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232e:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a72      	ldr	r2, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	496d      	ldr	r1, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234c:	4b6b      	ldr	r3, [pc, #428]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	4968      	ldr	r1, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
 8002360:	e025      	b.n	80023ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002362:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4960      	ldr	r1, [pc, #384]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	495b      	ldr	r1, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fd4c 	bl	8002e3c <RCC_SetFlashLatencyFromMSIRange>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e37a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ae:	f000 fc81 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4950      	ldr	r1, [pc, #320]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a4e      	ldr	r2, [pc, #312]	; (8002504 <HAL_RCC_OscConfig+0x278>)
 80023cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023ce:	4b4e      	ldr	r3, [pc, #312]	; (8002508 <HAL_RCC_OscConfig+0x27c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fd52 	bl	8000e7c <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d052      	beq.n	8002488 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	e35e      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d032      	beq.n	8002454 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a42      	ldr	r2, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fd8f 	bl	8000f1c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002402:	f7fe fd8b 	bl	8000f1c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e347      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a35      	ldr	r2, [pc, #212]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002426:	f043 0308 	orr.w	r3, r3, #8
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b33      	ldr	r3, [pc, #204]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4930      	ldr	r1, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	492b      	ldr	r1, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 8002452:	e01a      	b.n	800248a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002454:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a28      	ldr	r2, [pc, #160]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002460:	f7fe fd5c 	bl	8000f1c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002468:	f7fe fd58 	bl	8000f1c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e314      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1dc>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d073      	beq.n	800257e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x21c>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d10e      	bne.n	80024c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d063      	beq.n	800257c <HAL_RCC_OscConfig+0x2f0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d15f      	bne.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e2f1      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x24c>
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e025      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e0:	d114      	bne.n	800250c <HAL_RCC_OscConfig+0x280>
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e013      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
 80024fc:	40021000 	.word	0x40021000
 8002500:	08005040 	.word	0x08005040
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004
 800250c:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a9f      	ldr	r2, [pc, #636]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b9d      	ldr	r3, [pc, #628]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a9c      	ldr	r2, [pc, #624]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fcf6 	bl	8000f1c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe fcf2 	bl	8000f1c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e2ae      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002546:	4b92      	ldr	r3, [pc, #584]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x2a8>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fce2 	bl	8000f1c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7fe fcde 	bl	8000f1c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e29a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800256e:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x2d0>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d060      	beq.n	800264c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x310>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d119      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259c:	4b7c      	ldr	r3, [pc, #496]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x328>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e277      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4973      	ldr	r1, [pc, #460]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c8:	e040      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d023      	beq.n	800261a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6e      	ldr	r2, [pc, #440]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fc9d 	bl	8000f1c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fc99 	bl	8000f1c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e255      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f8:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b62      	ldr	r3, [pc, #392]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	495f      	ldr	r1, [pc, #380]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e018      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5c      	ldr	r2, [pc, #368]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fc79 	bl	8000f1c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe fc75 	bl	8000f1c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e231      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	4a4a      	ldr	r2, [pc, #296]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7fe fc54 	bl	8000f1c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7fe fc50 	bl	8000f1c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e20c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ef      	beq.n	8002678 <HAL_RCC_OscConfig+0x3ec>
 8002698:	e01b      	b.n	80026d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a0:	4a3b      	ldr	r2, [pc, #236]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc37 	bl	8000f1c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fc33 	bl	8000f1c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1ef      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ef      	bne.n	80026b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a6 	beq.w	800282c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e4:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCC_OscConfig+0x508>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d118      	bne.n	800274a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_RCC_OscConfig+0x508>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_RCC_OscConfig+0x508>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002724:	f7fe fbfa 	bl	8000f1c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe fbf6 	bl	8000f1c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1b2      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCC_OscConfig+0x508>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_RCC_OscConfig+0x4d8>
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002762:	e029      	b.n	80027b8 <HAL_RCC_OscConfig+0x52c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d115      	bne.n	8002798 <HAL_RCC_OscConfig+0x50c>
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_OscConfig+0x504>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800278c:	e014      	b.n	80027b8 <HAL_RCC_OscConfig+0x52c>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	4b9a      	ldr	r3, [pc, #616]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a99      	ldr	r2, [pc, #612]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a8:	4b96      	ldr	r3, [pc, #600]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	4a95      	ldr	r2, [pc, #596]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe fbac 	bl	8000f1c <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fba8 	bl	8000f1c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e162      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ed      	beq.n	80027c8 <HAL_RCC_OscConfig+0x53c>
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe fb95 	bl	8000f1c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe fb91 	bl	8000f1c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e14b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800280c:	4b7d      	ldr	r3, [pc, #500]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ed      	bne.n	80027f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b78      	ldr	r3, [pc, #480]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a77      	ldr	r2, [pc, #476]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d03c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01c      	beq.n	800287a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002842:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002846:	4a6f      	ldr	r2, [pc, #444]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002850:	f7fe fb64 	bl	8000f1c <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002858:	f7fe fb60 	bl	8000f1c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e11c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800286a:	4b66      	ldr	r3, [pc, #408]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800286c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <HAL_RCC_OscConfig+0x5cc>
 8002878:	e01b      	b.n	80028b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800287a:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800287c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002880:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fe fb47 	bl	8000f1c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002892:	f7fe fb43 	bl	8000f1c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0ff      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a4:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80028a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ef      	bne.n	8002892 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80f3 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	f040 80c9 	bne.w	8002a58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028c6:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d12c      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	3b01      	subs	r3, #1
 80028e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d123      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d11b      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d113      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	3b01      	subs	r3, #1
 800291a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d109      	bne.n	8002934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d06b      	beq.n	8002a0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d062      	beq.n	8002a00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800293a:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0ac      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2d      	ldr	r2, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002950:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002954:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002956:	f7fe fae1 	bl	8000f1c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe fadd 	bl	8000f1c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e099      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_RCC_OscConfig+0x77c>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800298c:	3a01      	subs	r2, #1
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002996:	0212      	lsls	r2, r2, #8
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800299e:	0852      	lsrs	r2, r2, #1
 80029a0:	3a01      	subs	r2, #1
 80029a2:	0552      	lsls	r2, r2, #21
 80029a4:	4311      	orrs	r1, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029aa:	0852      	lsrs	r2, r2, #1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	0652      	lsls	r2, r2, #25
 80029b0:	4311      	orrs	r1, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029b6:	06d2      	lsls	r2, r2, #27
 80029b8:	430a      	orrs	r2, r1
 80029ba:	4912      	ldr	r1, [pc, #72]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0f      	ldr	r2, [pc, #60]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80029c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d8:	f7fe faa0 	bl	8000f1c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fa9c 	bl	8000f1c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e058      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_OscConfig+0x778>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fe:	e050      	b.n	8002aa2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e04f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d144      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a30:	f7fe fa74 	bl	8000f1c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fa70 	bl	8000f1c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e02c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x7ac>
 8002a56:	e024      	b.n	8002aa2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b0c      	cmp	r3, #12
 8002a5c:	d01f      	beq.n	8002a9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fa57 	bl	8000f1c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fa53 	bl	8000f1c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e00f      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	4905      	ldr	r1, [pc, #20]	; (8002aac <HAL_RCC_OscConfig+0x820>)
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_OscConfig+0x824>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
 8002a9c:	e001      	b.n	8002aa2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	feeefffc 	.word	0xfeeefffc

08002ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0e7      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d910      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b72      	ldr	r3, [pc, #456]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4970      	ldr	r1, [pc, #448]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b6e      	ldr	r3, [pc, #440]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0cf      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d908      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4960      	ldr	r1, [pc, #384]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04c      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3a:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d121      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0a6      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b52:	4b54      	ldr	r3, [pc, #336]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e09a      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e08e      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e086      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4943      	ldr	r1, [pc, #268]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe f9be 	bl	8000f1c <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe f9ba 	bl	8000f1c <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e06e      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d208      	bcs.n	8002bfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	492b      	ldr	r1, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d210      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 0207 	bic.w	r2, r3, #7
 8002c10:	4923      	ldr	r1, [pc, #140]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e036      	b.n	8002c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4918      	ldr	r1, [pc, #96]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4910      	ldr	r1, [pc, #64]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c68:	f000 f824 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1f8>)
 8002c86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe f8f5 	bl	8000e7c <HAL_InitTick>
 8002c92:	4603      	mov	r3, r0
 8002c94:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c96:	7afb      	ldrb	r3, [r7, #11]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08005040 	.word	0x08005040
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d11e      	bne.n	8002d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d10:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e004      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d134      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d003      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0xac>
 8002d58:	e005      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d5c:	617b      	str	r3, [r7, #20]
      break;
 8002d5e:	e005      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d62:	617b      	str	r3, [r7, #20]
      break;
 8002d64:	e002      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	617b      	str	r3, [r7, #20]
      break;
 8002d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	3301      	adds	r3, #1
 8002d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	0e5b      	lsrs	r3, r3, #25
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dac:	69bb      	ldr	r3, [r7, #24]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08005058 	.word	0x08005058
 8002dc4:	00f42400 	.word	0x00f42400
 8002dc8:	007a1200 	.word	0x007a1200

08002dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002dec:	4602      	mov	r2, r0
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08005050 	.word	0x08005050

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e14:	f7ff ffda 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0adb      	lsrs	r3, r3, #11
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4904      	ldr	r1, [pc, #16]	; (8002e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08005050 	.word	0x08005050

08002e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e54:	f7ff f9b6 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002e58:	6178      	str	r0, [r7, #20]
 8002e5a:	e014      	b.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6593      	str	r3, [r2, #88]	; 0x58
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e74:	f7ff f9a6 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002e78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e8c:	d10b      	bne.n	8002ea6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d919      	bls.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2ba0      	cmp	r3, #160	; 0xa0
 8002e98:	d902      	bls.n	8002ea0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	e013      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	e010      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	d902      	bls.n	8002eb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002eac:	2303      	movs	r3, #3
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	e00a      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d102      	bne.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eb8:	2302      	movs	r3, #2
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e004      	b.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b70      	cmp	r3, #112	; 0x70
 8002ec2:	d101      	bne.n	8002ec8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 0207 	bic.w	r2, r3, #7
 8002ed0:	4909      	ldr	r1, [pc, #36]	; (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ed8:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d001      	beq.n	8002eea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40022000 	.word	0x40022000

08002efc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f04:	2300      	movs	r3, #0
 8002f06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d031      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f20:	d01a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f26:	d814      	bhi.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f30:	d10f      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f32:	4b5d      	ldr	r3, [pc, #372]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a5c      	ldr	r2, [pc, #368]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3e:	e00c      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f9de 	bl	8003308 <RCCEx_PLLSAI1_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	74fb      	strb	r3, [r7, #19]
      break;
 8002f56:	e000      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f60:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	494e      	ldr	r1, [pc, #312]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f76:	e001      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 809e 	beq.w	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f8e:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a3f      	ldr	r2, [pc, #252]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb0:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc0:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a39      	ldr	r2, [pc, #228]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fcc:	f7fd ffa6 	bl	8000f1c <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fd2:	e009      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd4:	f7fd ffa2 	bl	8000f1c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d902      	bls.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d15a      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003004:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01e      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	429a      	cmp	r2, r3
 8003014:	d019      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003020:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003042:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d016      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fd ff62 	bl	8000f1c <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305a:	e00b      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd ff5e 	bl	8000f1c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d902      	bls.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	74fb      	strb	r3, [r7, #19]
            break;
 8003072:	e006      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ec      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800309e:	e009      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b4:	7c7b      	ldrb	r3, [r7, #17]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d105      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ba:	4b8a      	ldr	r3, [pc, #552]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a89      	ldr	r2, [pc, #548]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d2:	4b84      	ldr	r3, [pc, #528]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f023 0203 	bic.w	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4980      	ldr	r1, [pc, #512]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b7b      	ldr	r3, [pc, #492]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f023 020c 	bic.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	4978      	ldr	r1, [pc, #480]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003116:	4b73      	ldr	r3, [pc, #460]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	496f      	ldr	r1, [pc, #444]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003138:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	4967      	ldr	r1, [pc, #412]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800315a:	4b62      	ldr	r3, [pc, #392]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	495e      	ldr	r1, [pc, #376]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	4956      	ldr	r1, [pc, #344]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d028      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c0:	4b48      	ldr	r3, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4945      	ldr	r1, [pc, #276]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031de:	d106      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e0:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a3f      	ldr	r2, [pc, #252]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ea:	60d3      	str	r3, [r2, #12]
 80031ec:	e011      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f6:	d10c      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	2101      	movs	r1, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f882 	bl	8003308 <RCCEx_PLLSAI1_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d028      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	492d      	ldr	r1, [pc, #180]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800323c:	d106      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003248:	60d3      	str	r3, [r2, #12]
 800324a:	e011      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003254:	d10c      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	2101      	movs	r1, #1
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f853 	bl	8003308 <RCCEx_PLLSAI1_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01c      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	4916      	ldr	r1, [pc, #88]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800329a:	d10c      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f830 	bl	8003308 <RCCEx_PLLSAI1_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	4904      	ldr	r1, [pc, #16]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000

08003308 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003316:	4b74      	ldr	r3, [pc, #464]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003322:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d10d      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
       ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800333a:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
       ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d047      	beq.n	80033de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	e044      	b.n	80033de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d018      	beq.n	800338e <RCCEx_PLLSAI1_Config+0x86>
 800335c:	2b03      	cmp	r3, #3
 800335e:	d825      	bhi.n	80033ac <RCCEx_PLLSAI1_Config+0xa4>
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <RCCEx_PLLSAI1_Config+0x62>
 8003364:	2b02      	cmp	r3, #2
 8003366:	d009      	beq.n	800337c <RCCEx_PLLSAI1_Config+0x74>
 8003368:	e020      	b.n	80033ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11d      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337a:	e01a      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800337c:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e013      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800339a:	4b53      	ldr	r3, [pc, #332]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033aa:	e006      	b.n	80033ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e004      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	430b      	orrs	r3, r1
 80033d8:	4943      	ldr	r1, [pc, #268]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d17c      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3f      	ldr	r2, [pc, #252]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f0:	f7fd fd94 	bl	8000f1c <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f6:	e009      	b.n	800340c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f8:	f7fd fd90 	bl	8000f1c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d902      	bls.n	800340c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	73fb      	strb	r3, [r7, #15]
        break;
 800340a:	e005      	b.n	8003418 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ef      	bne.n	80033f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d15f      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d110      	bne.n	8003446 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003424:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800342c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6892      	ldr	r2, [r2, #8]
 8003434:	0211      	lsls	r1, r2, #8
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	06d2      	lsls	r2, r2, #27
 800343c:	430a      	orrs	r2, r1
 800343e:	492a      	ldr	r1, [pc, #168]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003440:	4313      	orrs	r3, r2
 8003442:	610b      	str	r3, [r1, #16]
 8003444:	e027      	b.n	8003496 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d112      	bne.n	8003472 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003454:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6912      	ldr	r2, [r2, #16]
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0552      	lsls	r2, r2, #21
 8003468:	430a      	orrs	r2, r1
 800346a:	491f      	ldr	r1, [pc, #124]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	610b      	str	r3, [r1, #16]
 8003470:	e011      	b.n	8003496 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800347a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	0211      	lsls	r1, r2, #8
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6952      	ldr	r2, [r2, #20]
 8003488:	0852      	lsrs	r2, r2, #1
 800348a:	3a01      	subs	r2, #1
 800348c:	0652      	lsls	r2, r2, #25
 800348e:	430a      	orrs	r2, r1
 8003490:	4915      	ldr	r1, [pc, #84]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800349c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fd fd3b 	bl	8000f1c <HAL_GetTick>
 80034a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a8:	e009      	b.n	80034be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034aa:	f7fd fd37 	bl	8000f1c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d902      	bls.n	80034be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	73fb      	strb	r3, [r7, #15]
          break;
 80034bc:	e005      	b.n	80034ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ef      	beq.n	80034aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4903      	ldr	r1, [pc, #12]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e040      	b.n	8003580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fb28 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8c0 	bl	80036b0 <UART_SetConfig>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e022      	b.n	8003580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fae0 	bl	8003b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fb67 	bl	8003c4c <UART_CheckIdleState>
 800357e:	4603      	mov	r3, r0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359c:	2b20      	cmp	r3, #32
 800359e:	f040 8082 	bne.w	80036a6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_UART_Transmit+0x26>
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e07a      	b.n	80036a8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_UART_Transmit+0x38>
 80035bc:	2302      	movs	r3, #2
 80035be:	e073      	b.n	80036a8 <HAL_UART_Transmit+0x120>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d6:	f7fd fca1 	bl	8000f1c <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f4:	d108      	bne.n	8003608 <HAL_UART_Transmit+0x80>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	e003      	b.n	8003610 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003618:	e02d      	b.n	8003676 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2200      	movs	r2, #0
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fb5a 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e039      	b.n	80036a8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10b      	bne.n	8003652 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003646:	b292      	uxth	r2, r2
 8003648:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	3302      	adds	r3, #2
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	e008      	b.n	8003664 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b292      	uxth	r2, r2
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1cb      	bne.n	800361a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	2140      	movs	r1, #64	; 0x40
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fb26 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e005      	b.n	80036a8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b4:	b08a      	sub	sp, #40	; 0x28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4bb4      	ldr	r3, [pc, #720]	; (80039b0 <UART_SetConfig+0x300>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4aa9      	ldr	r2, [pc, #676]	; (80039b4 <UART_SetConfig+0x304>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	4313      	orrs	r3, r2
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	430a      	orrs	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4aa0      	ldr	r2, [pc, #640]	; (80039b8 <UART_SetConfig+0x308>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d126      	bne.n	8003788 <UART_SetConfig+0xd8>
 800373a:	4ba0      	ldr	r3, [pc, #640]	; (80039bc <UART_SetConfig+0x30c>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b03      	cmp	r3, #3
 8003746:	d81b      	bhi.n	8003780 <UART_SetConfig+0xd0>
 8003748:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <UART_SetConfig+0xa0>)
 800374a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374e:	bf00      	nop
 8003750:	08003761 	.word	0x08003761
 8003754:	08003771 	.word	0x08003771
 8003758:	08003769 	.word	0x08003769
 800375c:	08003779 	.word	0x08003779
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e080      	b.n	800386a <UART_SetConfig+0x1ba>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e07c      	b.n	800386a <UART_SetConfig+0x1ba>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e078      	b.n	800386a <UART_SetConfig+0x1ba>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e074      	b.n	800386a <UART_SetConfig+0x1ba>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e070      	b.n	800386a <UART_SetConfig+0x1ba>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a8c      	ldr	r2, [pc, #560]	; (80039c0 <UART_SetConfig+0x310>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d138      	bne.n	8003804 <UART_SetConfig+0x154>
 8003792:	4b8a      	ldr	r3, [pc, #552]	; (80039bc <UART_SetConfig+0x30c>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d82d      	bhi.n	80037fc <UART_SetConfig+0x14c>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0xf8>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037fd 	.word	0x080037fd
 80037b0:	080037fd 	.word	0x080037fd
 80037b4:	080037fd 	.word	0x080037fd
 80037b8:	080037ed 	.word	0x080037ed
 80037bc:	080037fd 	.word	0x080037fd
 80037c0:	080037fd 	.word	0x080037fd
 80037c4:	080037fd 	.word	0x080037fd
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	080037fd 	.word	0x080037fd
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	080037f5 	.word	0x080037f5
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e042      	b.n	800386a <UART_SetConfig+0x1ba>
 80037e4:	2302      	movs	r3, #2
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e03e      	b.n	800386a <UART_SetConfig+0x1ba>
 80037ec:	2304      	movs	r3, #4
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e03a      	b.n	800386a <UART_SetConfig+0x1ba>
 80037f4:	2308      	movs	r3, #8
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e036      	b.n	800386a <UART_SetConfig+0x1ba>
 80037fc:	2310      	movs	r3, #16
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e032      	b.n	800386a <UART_SetConfig+0x1ba>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a6a      	ldr	r2, [pc, #424]	; (80039b4 <UART_SetConfig+0x304>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d12a      	bne.n	8003864 <UART_SetConfig+0x1b4>
 800380e:	4b6b      	ldr	r3, [pc, #428]	; (80039bc <UART_SetConfig+0x30c>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800381c:	d01a      	beq.n	8003854 <UART_SetConfig+0x1a4>
 800381e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003822:	d81b      	bhi.n	800385c <UART_SetConfig+0x1ac>
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	d00c      	beq.n	8003844 <UART_SetConfig+0x194>
 800382a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382e:	d815      	bhi.n	800385c <UART_SetConfig+0x1ac>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <UART_SetConfig+0x18c>
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003838:	d008      	beq.n	800384c <UART_SetConfig+0x19c>
 800383a:	e00f      	b.n	800385c <UART_SetConfig+0x1ac>
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e012      	b.n	800386a <UART_SetConfig+0x1ba>
 8003844:	2302      	movs	r3, #2
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e00e      	b.n	800386a <UART_SetConfig+0x1ba>
 800384c:	2304      	movs	r3, #4
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e00a      	b.n	800386a <UART_SetConfig+0x1ba>
 8003854:	2308      	movs	r3, #8
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e006      	b.n	800386a <UART_SetConfig+0x1ba>
 800385c:	2310      	movs	r3, #16
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e002      	b.n	800386a <UART_SetConfig+0x1ba>
 8003864:	2310      	movs	r3, #16
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a51      	ldr	r2, [pc, #324]	; (80039b4 <UART_SetConfig+0x304>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d17a      	bne.n	800396a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003878:	2b08      	cmp	r3, #8
 800387a:	d824      	bhi.n	80038c6 <UART_SetConfig+0x216>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <UART_SetConfig+0x1d4>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038c7 	.word	0x080038c7
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038c7 	.word	0x080038c7
 8003894:	080038b7 	.word	0x080038b7
 8003898:	080038c7 	.word	0x080038c7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038c7 	.word	0x080038c7
 80038a4:	080038bf 	.word	0x080038bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7ff fa9c 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80038ac:	61f8      	str	r0, [r7, #28]
        break;
 80038ae:	e010      	b.n	80038d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b0:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <UART_SetConfig+0x314>)
 80038b2:	61fb      	str	r3, [r7, #28]
        break;
 80038b4:	e00d      	b.n	80038d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b6:	f7ff f9fd 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80038ba:	61f8      	str	r0, [r7, #28]
        break;
 80038bc:	e009      	b.n	80038d2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c2:	61fb      	str	r3, [r7, #28]
        break;
 80038c4:	e005      	b.n	80038d2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 8107 	beq.w	8003ae8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d305      	bcc.n	80038f6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d903      	bls.n	80038fe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038fc:	e0f4      	b.n	8003ae8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2200      	movs	r2, #0
 8003902:	461c      	mov	r4, r3
 8003904:	4615      	mov	r5, r2
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	022b      	lsls	r3, r5, #8
 8003910:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003914:	0222      	lsls	r2, r4, #8
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	6849      	ldr	r1, [r1, #4]
 800391a:	0849      	lsrs	r1, r1, #1
 800391c:	2000      	movs	r0, #0
 800391e:	4688      	mov	r8, r1
 8003920:	4681      	mov	r9, r0
 8003922:	eb12 0a08 	adds.w	sl, r2, r8
 8003926:	eb43 0b09 	adc.w	fp, r3, r9
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003938:	4650      	mov	r0, sl
 800393a:	4659      	mov	r1, fp
 800393c:	f7fc fca0 	bl	8000280 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4613      	mov	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800394e:	d308      	bcc.n	8003962 <UART_SetConfig+0x2b2>
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003956:	d204      	bcs.n	8003962 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	e0c2      	b.n	8003ae8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003968:	e0be      	b.n	8003ae8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003972:	d16a      	bne.n	8003a4a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003978:	2b08      	cmp	r3, #8
 800397a:	d834      	bhi.n	80039e6 <UART_SetConfig+0x336>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <UART_SetConfig+0x2d4>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039a9 	.word	0x080039a9
 8003988:	080039c9 	.word	0x080039c9
 800398c:	080039d1 	.word	0x080039d1
 8003990:	080039e7 	.word	0x080039e7
 8003994:	080039d7 	.word	0x080039d7
 8003998:	080039e7 	.word	0x080039e7
 800399c:	080039e7 	.word	0x080039e7
 80039a0:	080039e7 	.word	0x080039e7
 80039a4:	080039df 	.word	0x080039df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a8:	f7ff fa1c 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80039ac:	61f8      	str	r0, [r7, #28]
        break;
 80039ae:	e020      	b.n	80039f2 <UART_SetConfig+0x342>
 80039b0:	efff69f3 	.word	0xefff69f3
 80039b4:	40008000 	.word	0x40008000
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40004400 	.word	0x40004400
 80039c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7ff fa22 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 80039cc:	61f8      	str	r0, [r7, #28]
        break;
 80039ce:	e010      	b.n	80039f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d0:	4b4c      	ldr	r3, [pc, #304]	; (8003b04 <UART_SetConfig+0x454>)
 80039d2:	61fb      	str	r3, [r7, #28]
        break;
 80039d4:	e00d      	b.n	80039f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d6:	f7ff f96d 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 80039da:	61f8      	str	r0, [r7, #28]
        break;
 80039dc:	e009      	b.n	80039f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e2:	61fb      	str	r3, [r7, #28]
        break;
 80039e4:	e005      	b.n	80039f2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d077      	beq.n	8003ae8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	005a      	lsls	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d916      	bls.n	8003a42 <UART_SetConfig+0x392>
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d212      	bcs.n	8003a42 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f023 030f 	bic.w	r3, r3, #15
 8003a24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	085b      	lsrs	r3, r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	8afa      	ldrh	r2, [r7, #22]
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	e052      	b.n	8003ae8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a48:	e04e      	b.n	8003ae8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d827      	bhi.n	8003aa2 <UART_SetConfig+0x3f2>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <UART_SetConfig+0x3a8>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a7d 	.word	0x08003a7d
 8003a5c:	08003a85 	.word	0x08003a85
 8003a60:	08003a8d 	.word	0x08003a8d
 8003a64:	08003aa3 	.word	0x08003aa3
 8003a68:	08003a93 	.word	0x08003a93
 8003a6c:	08003aa3 	.word	0x08003aa3
 8003a70:	08003aa3 	.word	0x08003aa3
 8003a74:	08003aa3 	.word	0x08003aa3
 8003a78:	08003a9b 	.word	0x08003a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a7c:	f7ff f9b2 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 8003a80:	61f8      	str	r0, [r7, #28]
        break;
 8003a82:	e014      	b.n	8003aae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a84:	f7ff f9c4 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8003a88:	61f8      	str	r0, [r7, #28]
        break;
 8003a8a:	e010      	b.n	8003aae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <UART_SetConfig+0x454>)
 8003a8e:	61fb      	str	r3, [r7, #28]
        break;
 8003a90:	e00d      	b.n	8003aae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a92:	f7ff f90f 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8003a96:	61f8      	str	r0, [r7, #28]
        break;
 8003a98:	e009      	b.n	8003aae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9e:	61fb      	str	r3, [r7, #28]
        break;
 8003aa0:	e005      	b.n	8003aae <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003aac:	bf00      	nop
    }

    if (pclk != 0U)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d019      	beq.n	8003ae8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	085a      	lsrs	r2, r3, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	441a      	add	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b0f      	cmp	r3, #15
 8003acc:	d909      	bls.n	8003ae2 <UART_SetConfig+0x432>
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad4:	d205      	bcs.n	8003ae2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	e002      	b.n	8003ae8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3728      	adds	r7, #40	; 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b02:	bf00      	nop
 8003b04:	00f42400 	.word	0x00f42400

08003b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c06:	d10a      	bne.n	8003c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c5c:	f7fd f95e 	bl	8000f1c <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d10e      	bne.n	8003c8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f82d 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e023      	b.n	8003cd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d10e      	bne.n	8003cba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f817 	bl	8003cde <UART_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00d      	b.n	8003cd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b09c      	sub	sp, #112	; 0x70
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cee:	e0a5      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf6:	f000 80a1 	beq.w	8003e3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfa:	f7fd f90f 	bl	8000f1c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d302      	bcc.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d13e      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d24:	667b      	str	r3, [r7, #100]	; 0x64
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e6      	bne.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3308      	adds	r3, #8
 8003d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	663b      	str	r3, [r7, #96]	; 0x60
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3308      	adds	r3, #8
 8003d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e5      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e067      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d04f      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d147      	bne.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3308      	adds	r3, #8
 8003dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	613b      	str	r3, [r7, #16]
   return(result);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 0301 	bic.w	r3, r3, #1
 8003dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e08:	623a      	str	r2, [r7, #32]
 8003e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	69f9      	ldr	r1, [r7, #28]
 8003e0e:	6a3a      	ldr	r2, [r7, #32]
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e5      	bne.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e010      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	f43f af4a 	beq.w	8003cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3770      	adds	r7, #112	; 0x70
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <__errno>:
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <__errno+0x8>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	4d0d      	ldr	r5, [pc, #52]	; (8003eac <__libc_init_array+0x38>)
 8003e78:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7a:	1b64      	subs	r4, r4, r5
 8003e7c:	10a4      	asrs	r4, r4, #2
 8003e7e:	2600      	movs	r6, #0
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	4d0b      	ldr	r5, [pc, #44]	; (8003eb4 <__libc_init_array+0x40>)
 8003e86:	4c0c      	ldr	r4, [pc, #48]	; (8003eb8 <__libc_init_array+0x44>)
 8003e88:	f001 f88e 	bl	8004fa8 <_init>
 8003e8c:	1b64      	subs	r4, r4, r5
 8003e8e:	10a4      	asrs	r4, r4, #2
 8003e90:	2600      	movs	r6, #0
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	08005128 	.word	0x08005128
 8003eb0:	08005128 	.word	0x08005128
 8003eb4:	08005128 	.word	0x08005128
 8003eb8:	0800512c 	.word	0x0800512c

08003ebc <memset>:
 8003ebc:	4402      	add	r2, r0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memset+0xa>
 8003ec4:	4770      	bx	lr
 8003ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eca:	e7f9      	b.n	8003ec0 <memset+0x4>

08003ecc <_puts_r>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	460e      	mov	r6, r1
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	b118      	cbz	r0, 8003edc <_puts_r+0x10>
 8003ed4:	6983      	ldr	r3, [r0, #24]
 8003ed6:	b90b      	cbnz	r3, 8003edc <_puts_r+0x10>
 8003ed8:	f000 fa68 	bl	80043ac <__sinit>
 8003edc:	69ab      	ldr	r3, [r5, #24]
 8003ede:	68ac      	ldr	r4, [r5, #8]
 8003ee0:	b913      	cbnz	r3, 8003ee8 <_puts_r+0x1c>
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f000 fa62 	bl	80043ac <__sinit>
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <_puts_r+0xd0>)
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d120      	bne.n	8003f30 <_puts_r+0x64>
 8003eee:	686c      	ldr	r4, [r5, #4]
 8003ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ef2:	07db      	lsls	r3, r3, #31
 8003ef4:	d405      	bmi.n	8003f02 <_puts_r+0x36>
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	0598      	lsls	r0, r3, #22
 8003efa:	d402      	bmi.n	8003f02 <_puts_r+0x36>
 8003efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003efe:	f000 faf3 	bl	80044e8 <__retarget_lock_acquire_recursive>
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	0719      	lsls	r1, r3, #28
 8003f06:	d51d      	bpl.n	8003f44 <_puts_r+0x78>
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	b1db      	cbz	r3, 8003f44 <_puts_r+0x78>
 8003f0c:	3e01      	subs	r6, #1
 8003f0e:	68a3      	ldr	r3, [r4, #8]
 8003f10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f14:	3b01      	subs	r3, #1
 8003f16:	60a3      	str	r3, [r4, #8]
 8003f18:	bb39      	cbnz	r1, 8003f6a <_puts_r+0x9e>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da38      	bge.n	8003f90 <_puts_r+0xc4>
 8003f1e:	4622      	mov	r2, r4
 8003f20:	210a      	movs	r1, #10
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 f868 	bl	8003ff8 <__swbuf_r>
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d011      	beq.n	8003f50 <_puts_r+0x84>
 8003f2c:	250a      	movs	r5, #10
 8003f2e:	e011      	b.n	8003f54 <_puts_r+0x88>
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <_puts_r+0xd4>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <_puts_r+0x6e>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7da      	b.n	8003ef0 <_puts_r+0x24>
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <_puts_r+0xd8>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	bf08      	it	eq
 8003f40:	68ec      	ldreq	r4, [r5, #12]
 8003f42:	e7d5      	b.n	8003ef0 <_puts_r+0x24>
 8003f44:	4621      	mov	r1, r4
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 f8a8 	bl	800409c <__swsetup_r>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d0dd      	beq.n	8003f0c <_puts_r+0x40>
 8003f50:	f04f 35ff 	mov.w	r5, #4294967295
 8003f54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f56:	07da      	lsls	r2, r3, #31
 8003f58:	d405      	bmi.n	8003f66 <_puts_r+0x9a>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	059b      	lsls	r3, r3, #22
 8003f5e:	d402      	bmi.n	8003f66 <_puts_r+0x9a>
 8003f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f62:	f000 fac2 	bl	80044ea <__retarget_lock_release_recursive>
 8003f66:	4628      	mov	r0, r5
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da04      	bge.n	8003f78 <_puts_r+0xac>
 8003f6e:	69a2      	ldr	r2, [r4, #24]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	dc06      	bgt.n	8003f82 <_puts_r+0xb6>
 8003f74:	290a      	cmp	r1, #10
 8003f76:	d004      	beq.n	8003f82 <_puts_r+0xb6>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	6022      	str	r2, [r4, #0]
 8003f7e:	7019      	strb	r1, [r3, #0]
 8003f80:	e7c5      	b.n	8003f0e <_puts_r+0x42>
 8003f82:	4622      	mov	r2, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 f837 	bl	8003ff8 <__swbuf_r>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d1bf      	bne.n	8003f0e <_puts_r+0x42>
 8003f8e:	e7df      	b.n	8003f50 <_puts_r+0x84>
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	250a      	movs	r5, #10
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	6022      	str	r2, [r4, #0]
 8003f98:	701d      	strb	r5, [r3, #0]
 8003f9a:	e7db      	b.n	8003f54 <_puts_r+0x88>
 8003f9c:	080050ac 	.word	0x080050ac
 8003fa0:	080050cc 	.word	0x080050cc
 8003fa4:	0800508c 	.word	0x0800508c

08003fa8 <puts>:
 8003fa8:	4b02      	ldr	r3, [pc, #8]	; (8003fb4 <puts+0xc>)
 8003faa:	4601      	mov	r1, r0
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	f7ff bf8d 	b.w	8003ecc <_puts_r>
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c

08003fb8 <siprintf>:
 8003fb8:	b40e      	push	{r1, r2, r3}
 8003fba:	b500      	push	{lr}
 8003fbc:	b09c      	sub	sp, #112	; 0x70
 8003fbe:	ab1d      	add	r3, sp, #116	; 0x74
 8003fc0:	9002      	str	r0, [sp, #8]
 8003fc2:	9006      	str	r0, [sp, #24]
 8003fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fc8:	4809      	ldr	r0, [pc, #36]	; (8003ff0 <siprintf+0x38>)
 8003fca:	9107      	str	r1, [sp, #28]
 8003fcc:	9104      	str	r1, [sp, #16]
 8003fce:	4909      	ldr	r1, [pc, #36]	; (8003ff4 <siprintf+0x3c>)
 8003fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd4:	9105      	str	r1, [sp, #20]
 8003fd6:	6800      	ldr	r0, [r0, #0]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	a902      	add	r1, sp, #8
 8003fdc:	f000 fc28 	bl	8004830 <_svfiprintf_r>
 8003fe0:	9b02      	ldr	r3, [sp, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	b01c      	add	sp, #112	; 0x70
 8003fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fec:	b003      	add	sp, #12
 8003fee:	4770      	bx	lr
 8003ff0:	2000000c 	.word	0x2000000c
 8003ff4:	ffff0208 	.word	0xffff0208

08003ff8 <__swbuf_r>:
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	460e      	mov	r6, r1
 8003ffc:	4614      	mov	r4, r2
 8003ffe:	4605      	mov	r5, r0
 8004000:	b118      	cbz	r0, 800400a <__swbuf_r+0x12>
 8004002:	6983      	ldr	r3, [r0, #24]
 8004004:	b90b      	cbnz	r3, 800400a <__swbuf_r+0x12>
 8004006:	f000 f9d1 	bl	80043ac <__sinit>
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <__swbuf_r+0x98>)
 800400c:	429c      	cmp	r4, r3
 800400e:	d12b      	bne.n	8004068 <__swbuf_r+0x70>
 8004010:	686c      	ldr	r4, [r5, #4]
 8004012:	69a3      	ldr	r3, [r4, #24]
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	071a      	lsls	r2, r3, #28
 800401a:	d52f      	bpl.n	800407c <__swbuf_r+0x84>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	b36b      	cbz	r3, 800407c <__swbuf_r+0x84>
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1ac0      	subs	r0, r0, r3
 8004026:	6963      	ldr	r3, [r4, #20]
 8004028:	b2f6      	uxtb	r6, r6
 800402a:	4283      	cmp	r3, r0
 800402c:	4637      	mov	r7, r6
 800402e:	dc04      	bgt.n	800403a <__swbuf_r+0x42>
 8004030:	4621      	mov	r1, r4
 8004032:	4628      	mov	r0, r5
 8004034:	f000 f926 	bl	8004284 <_fflush_r>
 8004038:	bb30      	cbnz	r0, 8004088 <__swbuf_r+0x90>
 800403a:	68a3      	ldr	r3, [r4, #8]
 800403c:	3b01      	subs	r3, #1
 800403e:	60a3      	str	r3, [r4, #8]
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	6022      	str	r2, [r4, #0]
 8004046:	701e      	strb	r6, [r3, #0]
 8004048:	6963      	ldr	r3, [r4, #20]
 800404a:	3001      	adds	r0, #1
 800404c:	4283      	cmp	r3, r0
 800404e:	d004      	beq.n	800405a <__swbuf_r+0x62>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	07db      	lsls	r3, r3, #31
 8004054:	d506      	bpl.n	8004064 <__swbuf_r+0x6c>
 8004056:	2e0a      	cmp	r6, #10
 8004058:	d104      	bne.n	8004064 <__swbuf_r+0x6c>
 800405a:	4621      	mov	r1, r4
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f911 	bl	8004284 <_fflush_r>
 8004062:	b988      	cbnz	r0, 8004088 <__swbuf_r+0x90>
 8004064:	4638      	mov	r0, r7
 8004066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <__swbuf_r+0x9c>)
 800406a:	429c      	cmp	r4, r3
 800406c:	d101      	bne.n	8004072 <__swbuf_r+0x7a>
 800406e:	68ac      	ldr	r4, [r5, #8]
 8004070:	e7cf      	b.n	8004012 <__swbuf_r+0x1a>
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <__swbuf_r+0xa0>)
 8004074:	429c      	cmp	r4, r3
 8004076:	bf08      	it	eq
 8004078:	68ec      	ldreq	r4, [r5, #12]
 800407a:	e7ca      	b.n	8004012 <__swbuf_r+0x1a>
 800407c:	4621      	mov	r1, r4
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f80c 	bl	800409c <__swsetup_r>
 8004084:	2800      	cmp	r0, #0
 8004086:	d0cb      	beq.n	8004020 <__swbuf_r+0x28>
 8004088:	f04f 37ff 	mov.w	r7, #4294967295
 800408c:	e7ea      	b.n	8004064 <__swbuf_r+0x6c>
 800408e:	bf00      	nop
 8004090:	080050ac 	.word	0x080050ac
 8004094:	080050cc 	.word	0x080050cc
 8004098:	0800508c 	.word	0x0800508c

0800409c <__swsetup_r>:
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <__swsetup_r+0xcc>)
 800409e:	b570      	push	{r4, r5, r6, lr}
 80040a0:	681d      	ldr	r5, [r3, #0]
 80040a2:	4606      	mov	r6, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	b125      	cbz	r5, 80040b2 <__swsetup_r+0x16>
 80040a8:	69ab      	ldr	r3, [r5, #24]
 80040aa:	b913      	cbnz	r3, 80040b2 <__swsetup_r+0x16>
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 f97d 	bl	80043ac <__sinit>
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <__swsetup_r+0xd0>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	d10f      	bne.n	80040d8 <__swsetup_r+0x3c>
 80040b8:	686c      	ldr	r4, [r5, #4]
 80040ba:	89a3      	ldrh	r3, [r4, #12]
 80040bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040c0:	0719      	lsls	r1, r3, #28
 80040c2:	d42c      	bmi.n	800411e <__swsetup_r+0x82>
 80040c4:	06dd      	lsls	r5, r3, #27
 80040c6:	d411      	bmi.n	80040ec <__swsetup_r+0x50>
 80040c8:	2309      	movs	r3, #9
 80040ca:	6033      	str	r3, [r6, #0]
 80040cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040d0:	81a3      	strh	r3, [r4, #12]
 80040d2:	f04f 30ff 	mov.w	r0, #4294967295
 80040d6:	e03e      	b.n	8004156 <__swsetup_r+0xba>
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <__swsetup_r+0xd4>)
 80040da:	429c      	cmp	r4, r3
 80040dc:	d101      	bne.n	80040e2 <__swsetup_r+0x46>
 80040de:	68ac      	ldr	r4, [r5, #8]
 80040e0:	e7eb      	b.n	80040ba <__swsetup_r+0x1e>
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <__swsetup_r+0xd8>)
 80040e4:	429c      	cmp	r4, r3
 80040e6:	bf08      	it	eq
 80040e8:	68ec      	ldreq	r4, [r5, #12]
 80040ea:	e7e6      	b.n	80040ba <__swsetup_r+0x1e>
 80040ec:	0758      	lsls	r0, r3, #29
 80040ee:	d512      	bpl.n	8004116 <__swsetup_r+0x7a>
 80040f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040f2:	b141      	cbz	r1, 8004106 <__swsetup_r+0x6a>
 80040f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040f8:	4299      	cmp	r1, r3
 80040fa:	d002      	beq.n	8004102 <__swsetup_r+0x66>
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 fa5b 	bl	80045b8 <_free_r>
 8004102:	2300      	movs	r3, #0
 8004104:	6363      	str	r3, [r4, #52]	; 0x34
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800410c:	81a3      	strh	r3, [r4, #12]
 800410e:	2300      	movs	r3, #0
 8004110:	6063      	str	r3, [r4, #4]
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	81a3      	strh	r3, [r4, #12]
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	b94b      	cbnz	r3, 8004136 <__swsetup_r+0x9a>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d003      	beq.n	8004136 <__swsetup_r+0x9a>
 800412e:	4621      	mov	r1, r4
 8004130:	4630      	mov	r0, r6
 8004132:	f000 fa01 	bl	8004538 <__smakebuf_r>
 8004136:	89a0      	ldrh	r0, [r4, #12]
 8004138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800413c:	f010 0301 	ands.w	r3, r0, #1
 8004140:	d00a      	beq.n	8004158 <__swsetup_r+0xbc>
 8004142:	2300      	movs	r3, #0
 8004144:	60a3      	str	r3, [r4, #8]
 8004146:	6963      	ldr	r3, [r4, #20]
 8004148:	425b      	negs	r3, r3
 800414a:	61a3      	str	r3, [r4, #24]
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	b943      	cbnz	r3, 8004162 <__swsetup_r+0xc6>
 8004150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004154:	d1ba      	bne.n	80040cc <__swsetup_r+0x30>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	0781      	lsls	r1, r0, #30
 800415a:	bf58      	it	pl
 800415c:	6963      	ldrpl	r3, [r4, #20]
 800415e:	60a3      	str	r3, [r4, #8]
 8004160:	e7f4      	b.n	800414c <__swsetup_r+0xb0>
 8004162:	2000      	movs	r0, #0
 8004164:	e7f7      	b.n	8004156 <__swsetup_r+0xba>
 8004166:	bf00      	nop
 8004168:	2000000c 	.word	0x2000000c
 800416c:	080050ac 	.word	0x080050ac
 8004170:	080050cc 	.word	0x080050cc
 8004174:	0800508c 	.word	0x0800508c

08004178 <__sflush_r>:
 8004178:	898a      	ldrh	r2, [r1, #12]
 800417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	4605      	mov	r5, r0
 8004180:	0710      	lsls	r0, r2, #28
 8004182:	460c      	mov	r4, r1
 8004184:	d458      	bmi.n	8004238 <__sflush_r+0xc0>
 8004186:	684b      	ldr	r3, [r1, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dc05      	bgt.n	8004198 <__sflush_r+0x20>
 800418c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	dc02      	bgt.n	8004198 <__sflush_r+0x20>
 8004192:	2000      	movs	r0, #0
 8004194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800419a:	2e00      	cmp	r6, #0
 800419c:	d0f9      	beq.n	8004192 <__sflush_r+0x1a>
 800419e:	2300      	movs	r3, #0
 80041a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041a4:	682f      	ldr	r7, [r5, #0]
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	d032      	beq.n	8004210 <__sflush_r+0x98>
 80041aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	075a      	lsls	r2, r3, #29
 80041b0:	d505      	bpl.n	80041be <__sflush_r+0x46>
 80041b2:	6863      	ldr	r3, [r4, #4]
 80041b4:	1ac0      	subs	r0, r0, r3
 80041b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041b8:	b10b      	cbz	r3, 80041be <__sflush_r+0x46>
 80041ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041bc:	1ac0      	subs	r0, r0, r3
 80041be:	2300      	movs	r3, #0
 80041c0:	4602      	mov	r2, r0
 80041c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041c4:	6a21      	ldr	r1, [r4, #32]
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b0      	blx	r6
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	d106      	bne.n	80041de <__sflush_r+0x66>
 80041d0:	6829      	ldr	r1, [r5, #0]
 80041d2:	291d      	cmp	r1, #29
 80041d4:	d82c      	bhi.n	8004230 <__sflush_r+0xb8>
 80041d6:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <__sflush_r+0x108>)
 80041d8:	40ca      	lsrs	r2, r1
 80041da:	07d6      	lsls	r6, r2, #31
 80041dc:	d528      	bpl.n	8004230 <__sflush_r+0xb8>
 80041de:	2200      	movs	r2, #0
 80041e0:	6062      	str	r2, [r4, #4]
 80041e2:	04d9      	lsls	r1, r3, #19
 80041e4:	6922      	ldr	r2, [r4, #16]
 80041e6:	6022      	str	r2, [r4, #0]
 80041e8:	d504      	bpl.n	80041f4 <__sflush_r+0x7c>
 80041ea:	1c42      	adds	r2, r0, #1
 80041ec:	d101      	bne.n	80041f2 <__sflush_r+0x7a>
 80041ee:	682b      	ldr	r3, [r5, #0]
 80041f0:	b903      	cbnz	r3, 80041f4 <__sflush_r+0x7c>
 80041f2:	6560      	str	r0, [r4, #84]	; 0x54
 80041f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041f6:	602f      	str	r7, [r5, #0]
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d0ca      	beq.n	8004192 <__sflush_r+0x1a>
 80041fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004200:	4299      	cmp	r1, r3
 8004202:	d002      	beq.n	800420a <__sflush_r+0x92>
 8004204:	4628      	mov	r0, r5
 8004206:	f000 f9d7 	bl	80045b8 <_free_r>
 800420a:	2000      	movs	r0, #0
 800420c:	6360      	str	r0, [r4, #52]	; 0x34
 800420e:	e7c1      	b.n	8004194 <__sflush_r+0x1c>
 8004210:	6a21      	ldr	r1, [r4, #32]
 8004212:	2301      	movs	r3, #1
 8004214:	4628      	mov	r0, r5
 8004216:	47b0      	blx	r6
 8004218:	1c41      	adds	r1, r0, #1
 800421a:	d1c7      	bne.n	80041ac <__sflush_r+0x34>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0c4      	beq.n	80041ac <__sflush_r+0x34>
 8004222:	2b1d      	cmp	r3, #29
 8004224:	d001      	beq.n	800422a <__sflush_r+0xb2>
 8004226:	2b16      	cmp	r3, #22
 8004228:	d101      	bne.n	800422e <__sflush_r+0xb6>
 800422a:	602f      	str	r7, [r5, #0]
 800422c:	e7b1      	b.n	8004192 <__sflush_r+0x1a>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004234:	81a3      	strh	r3, [r4, #12]
 8004236:	e7ad      	b.n	8004194 <__sflush_r+0x1c>
 8004238:	690f      	ldr	r7, [r1, #16]
 800423a:	2f00      	cmp	r7, #0
 800423c:	d0a9      	beq.n	8004192 <__sflush_r+0x1a>
 800423e:	0793      	lsls	r3, r2, #30
 8004240:	680e      	ldr	r6, [r1, #0]
 8004242:	bf08      	it	eq
 8004244:	694b      	ldreq	r3, [r1, #20]
 8004246:	600f      	str	r7, [r1, #0]
 8004248:	bf18      	it	ne
 800424a:	2300      	movne	r3, #0
 800424c:	eba6 0807 	sub.w	r8, r6, r7
 8004250:	608b      	str	r3, [r1, #8]
 8004252:	f1b8 0f00 	cmp.w	r8, #0
 8004256:	dd9c      	ble.n	8004192 <__sflush_r+0x1a>
 8004258:	6a21      	ldr	r1, [r4, #32]
 800425a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800425c:	4643      	mov	r3, r8
 800425e:	463a      	mov	r2, r7
 8004260:	4628      	mov	r0, r5
 8004262:	47b0      	blx	r6
 8004264:	2800      	cmp	r0, #0
 8004266:	dc06      	bgt.n	8004276 <__sflush_r+0xfe>
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	e78e      	b.n	8004194 <__sflush_r+0x1c>
 8004276:	4407      	add	r7, r0
 8004278:	eba8 0800 	sub.w	r8, r8, r0
 800427c:	e7e9      	b.n	8004252 <__sflush_r+0xda>
 800427e:	bf00      	nop
 8004280:	20400001 	.word	0x20400001

08004284 <_fflush_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	690b      	ldr	r3, [r1, #16]
 8004288:	4605      	mov	r5, r0
 800428a:	460c      	mov	r4, r1
 800428c:	b913      	cbnz	r3, 8004294 <_fflush_r+0x10>
 800428e:	2500      	movs	r5, #0
 8004290:	4628      	mov	r0, r5
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	b118      	cbz	r0, 800429e <_fflush_r+0x1a>
 8004296:	6983      	ldr	r3, [r0, #24]
 8004298:	b90b      	cbnz	r3, 800429e <_fflush_r+0x1a>
 800429a:	f000 f887 	bl	80043ac <__sinit>
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <_fflush_r+0x6c>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d11b      	bne.n	80042dc <_fflush_r+0x58>
 80042a4:	686c      	ldr	r4, [r5, #4]
 80042a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <_fflush_r+0xa>
 80042ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042b0:	07d0      	lsls	r0, r2, #31
 80042b2:	d404      	bmi.n	80042be <_fflush_r+0x3a>
 80042b4:	0599      	lsls	r1, r3, #22
 80042b6:	d402      	bmi.n	80042be <_fflush_r+0x3a>
 80042b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ba:	f000 f915 	bl	80044e8 <__retarget_lock_acquire_recursive>
 80042be:	4628      	mov	r0, r5
 80042c0:	4621      	mov	r1, r4
 80042c2:	f7ff ff59 	bl	8004178 <__sflush_r>
 80042c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042c8:	07da      	lsls	r2, r3, #31
 80042ca:	4605      	mov	r5, r0
 80042cc:	d4e0      	bmi.n	8004290 <_fflush_r+0xc>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	059b      	lsls	r3, r3, #22
 80042d2:	d4dd      	bmi.n	8004290 <_fflush_r+0xc>
 80042d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042d6:	f000 f908 	bl	80044ea <__retarget_lock_release_recursive>
 80042da:	e7d9      	b.n	8004290 <_fflush_r+0xc>
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_fflush_r+0x70>)
 80042de:	429c      	cmp	r4, r3
 80042e0:	d101      	bne.n	80042e6 <_fflush_r+0x62>
 80042e2:	68ac      	ldr	r4, [r5, #8]
 80042e4:	e7df      	b.n	80042a6 <_fflush_r+0x22>
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <_fflush_r+0x74>)
 80042e8:	429c      	cmp	r4, r3
 80042ea:	bf08      	it	eq
 80042ec:	68ec      	ldreq	r4, [r5, #12]
 80042ee:	e7da      	b.n	80042a6 <_fflush_r+0x22>
 80042f0:	080050ac 	.word	0x080050ac
 80042f4:	080050cc 	.word	0x080050cc
 80042f8:	0800508c 	.word	0x0800508c

080042fc <std>:
 80042fc:	2300      	movs	r3, #0
 80042fe:	b510      	push	{r4, lr}
 8004300:	4604      	mov	r4, r0
 8004302:	e9c0 3300 	strd	r3, r3, [r0]
 8004306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800430a:	6083      	str	r3, [r0, #8]
 800430c:	8181      	strh	r1, [r0, #12]
 800430e:	6643      	str	r3, [r0, #100]	; 0x64
 8004310:	81c2      	strh	r2, [r0, #14]
 8004312:	6183      	str	r3, [r0, #24]
 8004314:	4619      	mov	r1, r3
 8004316:	2208      	movs	r2, #8
 8004318:	305c      	adds	r0, #92	; 0x5c
 800431a:	f7ff fdcf 	bl	8003ebc <memset>
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <std+0x38>)
 8004320:	6263      	str	r3, [r4, #36]	; 0x24
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <std+0x3c>)
 8004324:	62a3      	str	r3, [r4, #40]	; 0x28
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <std+0x40>)
 8004328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <std+0x44>)
 800432c:	6224      	str	r4, [r4, #32]
 800432e:	6323      	str	r3, [r4, #48]	; 0x30
 8004330:	bd10      	pop	{r4, pc}
 8004332:	bf00      	nop
 8004334:	08004d79 	.word	0x08004d79
 8004338:	08004d9b 	.word	0x08004d9b
 800433c:	08004dd3 	.word	0x08004dd3
 8004340:	08004df7 	.word	0x08004df7

08004344 <_cleanup_r>:
 8004344:	4901      	ldr	r1, [pc, #4]	; (800434c <_cleanup_r+0x8>)
 8004346:	f000 b8af 	b.w	80044a8 <_fwalk_reent>
 800434a:	bf00      	nop
 800434c:	08004285 	.word	0x08004285

08004350 <__sfmoreglue>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	2268      	movs	r2, #104	; 0x68
 8004354:	1e4d      	subs	r5, r1, #1
 8004356:	4355      	muls	r5, r2
 8004358:	460e      	mov	r6, r1
 800435a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800435e:	f000 f997 	bl	8004690 <_malloc_r>
 8004362:	4604      	mov	r4, r0
 8004364:	b140      	cbz	r0, 8004378 <__sfmoreglue+0x28>
 8004366:	2100      	movs	r1, #0
 8004368:	e9c0 1600 	strd	r1, r6, [r0]
 800436c:	300c      	adds	r0, #12
 800436e:	60a0      	str	r0, [r4, #8]
 8004370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004374:	f7ff fda2 	bl	8003ebc <memset>
 8004378:	4620      	mov	r0, r4
 800437a:	bd70      	pop	{r4, r5, r6, pc}

0800437c <__sfp_lock_acquire>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__sfp_lock_acquire+0x8>)
 800437e:	f000 b8b3 	b.w	80044e8 <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	2000016d 	.word	0x2000016d

08004388 <__sfp_lock_release>:
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <__sfp_lock_release+0x8>)
 800438a:	f000 b8ae 	b.w	80044ea <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	2000016d 	.word	0x2000016d

08004394 <__sinit_lock_acquire>:
 8004394:	4801      	ldr	r0, [pc, #4]	; (800439c <__sinit_lock_acquire+0x8>)
 8004396:	f000 b8a7 	b.w	80044e8 <__retarget_lock_acquire_recursive>
 800439a:	bf00      	nop
 800439c:	2000016e 	.word	0x2000016e

080043a0 <__sinit_lock_release>:
 80043a0:	4801      	ldr	r0, [pc, #4]	; (80043a8 <__sinit_lock_release+0x8>)
 80043a2:	f000 b8a2 	b.w	80044ea <__retarget_lock_release_recursive>
 80043a6:	bf00      	nop
 80043a8:	2000016e 	.word	0x2000016e

080043ac <__sinit>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	4604      	mov	r4, r0
 80043b0:	f7ff fff0 	bl	8004394 <__sinit_lock_acquire>
 80043b4:	69a3      	ldr	r3, [r4, #24]
 80043b6:	b11b      	cbz	r3, 80043c0 <__sinit+0x14>
 80043b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043bc:	f7ff bff0 	b.w	80043a0 <__sinit_lock_release>
 80043c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043c4:	6523      	str	r3, [r4, #80]	; 0x50
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <__sinit+0x68>)
 80043c8:	4a13      	ldr	r2, [pc, #76]	; (8004418 <__sinit+0x6c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80043ce:	42a3      	cmp	r3, r4
 80043d0:	bf04      	itt	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	61a3      	streq	r3, [r4, #24]
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 f820 	bl	800441c <__sfp>
 80043dc:	6060      	str	r0, [r4, #4]
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 f81c 	bl	800441c <__sfp>
 80043e4:	60a0      	str	r0, [r4, #8]
 80043e6:	4620      	mov	r0, r4
 80043e8:	f000 f818 	bl	800441c <__sfp>
 80043ec:	2200      	movs	r2, #0
 80043ee:	60e0      	str	r0, [r4, #12]
 80043f0:	2104      	movs	r1, #4
 80043f2:	6860      	ldr	r0, [r4, #4]
 80043f4:	f7ff ff82 	bl	80042fc <std>
 80043f8:	68a0      	ldr	r0, [r4, #8]
 80043fa:	2201      	movs	r2, #1
 80043fc:	2109      	movs	r1, #9
 80043fe:	f7ff ff7d 	bl	80042fc <std>
 8004402:	68e0      	ldr	r0, [r4, #12]
 8004404:	2202      	movs	r2, #2
 8004406:	2112      	movs	r1, #18
 8004408:	f7ff ff78 	bl	80042fc <std>
 800440c:	2301      	movs	r3, #1
 800440e:	61a3      	str	r3, [r4, #24]
 8004410:	e7d2      	b.n	80043b8 <__sinit+0xc>
 8004412:	bf00      	nop
 8004414:	08005088 	.word	0x08005088
 8004418:	08004345 	.word	0x08004345

0800441c <__sfp>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	4607      	mov	r7, r0
 8004420:	f7ff ffac 	bl	800437c <__sfp_lock_acquire>
 8004424:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <__sfp+0x84>)
 8004426:	681e      	ldr	r6, [r3, #0]
 8004428:	69b3      	ldr	r3, [r6, #24]
 800442a:	b913      	cbnz	r3, 8004432 <__sfp+0x16>
 800442c:	4630      	mov	r0, r6
 800442e:	f7ff ffbd 	bl	80043ac <__sinit>
 8004432:	3648      	adds	r6, #72	; 0x48
 8004434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004438:	3b01      	subs	r3, #1
 800443a:	d503      	bpl.n	8004444 <__sfp+0x28>
 800443c:	6833      	ldr	r3, [r6, #0]
 800443e:	b30b      	cbz	r3, 8004484 <__sfp+0x68>
 8004440:	6836      	ldr	r6, [r6, #0]
 8004442:	e7f7      	b.n	8004434 <__sfp+0x18>
 8004444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004448:	b9d5      	cbnz	r5, 8004480 <__sfp+0x64>
 800444a:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <__sfp+0x88>)
 800444c:	60e3      	str	r3, [r4, #12]
 800444e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004452:	6665      	str	r5, [r4, #100]	; 0x64
 8004454:	f000 f847 	bl	80044e6 <__retarget_lock_init_recursive>
 8004458:	f7ff ff96 	bl	8004388 <__sfp_lock_release>
 800445c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004464:	6025      	str	r5, [r4, #0]
 8004466:	61a5      	str	r5, [r4, #24]
 8004468:	2208      	movs	r2, #8
 800446a:	4629      	mov	r1, r5
 800446c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004470:	f7ff fd24 	bl	8003ebc <memset>
 8004474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800447c:	4620      	mov	r0, r4
 800447e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004480:	3468      	adds	r4, #104	; 0x68
 8004482:	e7d9      	b.n	8004438 <__sfp+0x1c>
 8004484:	2104      	movs	r1, #4
 8004486:	4638      	mov	r0, r7
 8004488:	f7ff ff62 	bl	8004350 <__sfmoreglue>
 800448c:	4604      	mov	r4, r0
 800448e:	6030      	str	r0, [r6, #0]
 8004490:	2800      	cmp	r0, #0
 8004492:	d1d5      	bne.n	8004440 <__sfp+0x24>
 8004494:	f7ff ff78 	bl	8004388 <__sfp_lock_release>
 8004498:	230c      	movs	r3, #12
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	e7ee      	b.n	800447c <__sfp+0x60>
 800449e:	bf00      	nop
 80044a0:	08005088 	.word	0x08005088
 80044a4:	ffff0001 	.word	0xffff0001

080044a8 <_fwalk_reent>:
 80044a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ac:	4606      	mov	r6, r0
 80044ae:	4688      	mov	r8, r1
 80044b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044b4:	2700      	movs	r7, #0
 80044b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044ba:	f1b9 0901 	subs.w	r9, r9, #1
 80044be:	d505      	bpl.n	80044cc <_fwalk_reent+0x24>
 80044c0:	6824      	ldr	r4, [r4, #0]
 80044c2:	2c00      	cmp	r4, #0
 80044c4:	d1f7      	bne.n	80044b6 <_fwalk_reent+0xe>
 80044c6:	4638      	mov	r0, r7
 80044c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044cc:	89ab      	ldrh	r3, [r5, #12]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d907      	bls.n	80044e2 <_fwalk_reent+0x3a>
 80044d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044d6:	3301      	adds	r3, #1
 80044d8:	d003      	beq.n	80044e2 <_fwalk_reent+0x3a>
 80044da:	4629      	mov	r1, r5
 80044dc:	4630      	mov	r0, r6
 80044de:	47c0      	blx	r8
 80044e0:	4307      	orrs	r7, r0
 80044e2:	3568      	adds	r5, #104	; 0x68
 80044e4:	e7e9      	b.n	80044ba <_fwalk_reent+0x12>

080044e6 <__retarget_lock_init_recursive>:
 80044e6:	4770      	bx	lr

080044e8 <__retarget_lock_acquire_recursive>:
 80044e8:	4770      	bx	lr

080044ea <__retarget_lock_release_recursive>:
 80044ea:	4770      	bx	lr

080044ec <__swhatbuf_r>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	460e      	mov	r6, r1
 80044f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f4:	2900      	cmp	r1, #0
 80044f6:	b096      	sub	sp, #88	; 0x58
 80044f8:	4614      	mov	r4, r2
 80044fa:	461d      	mov	r5, r3
 80044fc:	da08      	bge.n	8004510 <__swhatbuf_r+0x24>
 80044fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	602a      	str	r2, [r5, #0]
 8004506:	061a      	lsls	r2, r3, #24
 8004508:	d410      	bmi.n	800452c <__swhatbuf_r+0x40>
 800450a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800450e:	e00e      	b.n	800452e <__swhatbuf_r+0x42>
 8004510:	466a      	mov	r2, sp
 8004512:	f000 fc97 	bl	8004e44 <_fstat_r>
 8004516:	2800      	cmp	r0, #0
 8004518:	dbf1      	blt.n	80044fe <__swhatbuf_r+0x12>
 800451a:	9a01      	ldr	r2, [sp, #4]
 800451c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004520:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004524:	425a      	negs	r2, r3
 8004526:	415a      	adcs	r2, r3
 8004528:	602a      	str	r2, [r5, #0]
 800452a:	e7ee      	b.n	800450a <__swhatbuf_r+0x1e>
 800452c:	2340      	movs	r3, #64	; 0x40
 800452e:	2000      	movs	r0, #0
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	b016      	add	sp, #88	; 0x58
 8004534:	bd70      	pop	{r4, r5, r6, pc}
	...

08004538 <__smakebuf_r>:
 8004538:	898b      	ldrh	r3, [r1, #12]
 800453a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800453c:	079d      	lsls	r5, r3, #30
 800453e:	4606      	mov	r6, r0
 8004540:	460c      	mov	r4, r1
 8004542:	d507      	bpl.n	8004554 <__smakebuf_r+0x1c>
 8004544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	6123      	str	r3, [r4, #16]
 800454c:	2301      	movs	r3, #1
 800454e:	6163      	str	r3, [r4, #20]
 8004550:	b002      	add	sp, #8
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	ab01      	add	r3, sp, #4
 8004556:	466a      	mov	r2, sp
 8004558:	f7ff ffc8 	bl	80044ec <__swhatbuf_r>
 800455c:	9900      	ldr	r1, [sp, #0]
 800455e:	4605      	mov	r5, r0
 8004560:	4630      	mov	r0, r6
 8004562:	f000 f895 	bl	8004690 <_malloc_r>
 8004566:	b948      	cbnz	r0, 800457c <__smakebuf_r+0x44>
 8004568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800456c:	059a      	lsls	r2, r3, #22
 800456e:	d4ef      	bmi.n	8004550 <__smakebuf_r+0x18>
 8004570:	f023 0303 	bic.w	r3, r3, #3
 8004574:	f043 0302 	orr.w	r3, r3, #2
 8004578:	81a3      	strh	r3, [r4, #12]
 800457a:	e7e3      	b.n	8004544 <__smakebuf_r+0xc>
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <__smakebuf_r+0x7c>)
 800457e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	6020      	str	r0, [r4, #0]
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	9b00      	ldr	r3, [sp, #0]
 800458c:	6163      	str	r3, [r4, #20]
 800458e:	9b01      	ldr	r3, [sp, #4]
 8004590:	6120      	str	r0, [r4, #16]
 8004592:	b15b      	cbz	r3, 80045ac <__smakebuf_r+0x74>
 8004594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004598:	4630      	mov	r0, r6
 800459a:	f000 fc65 	bl	8004e68 <_isatty_r>
 800459e:	b128      	cbz	r0, 80045ac <__smakebuf_r+0x74>
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	89a0      	ldrh	r0, [r4, #12]
 80045ae:	4305      	orrs	r5, r0
 80045b0:	81a5      	strh	r5, [r4, #12]
 80045b2:	e7cd      	b.n	8004550 <__smakebuf_r+0x18>
 80045b4:	08004345 	.word	0x08004345

080045b8 <_free_r>:
 80045b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ba:	2900      	cmp	r1, #0
 80045bc:	d044      	beq.n	8004648 <_free_r+0x90>
 80045be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c2:	9001      	str	r0, [sp, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f1a1 0404 	sub.w	r4, r1, #4
 80045ca:	bfb8      	it	lt
 80045cc:	18e4      	addlt	r4, r4, r3
 80045ce:	f000 fc95 	bl	8004efc <__malloc_lock>
 80045d2:	4a1e      	ldr	r2, [pc, #120]	; (800464c <_free_r+0x94>)
 80045d4:	9801      	ldr	r0, [sp, #4]
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	b933      	cbnz	r3, 80045e8 <_free_r+0x30>
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	6014      	str	r4, [r2, #0]
 80045de:	b003      	add	sp, #12
 80045e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045e4:	f000 bc90 	b.w	8004f08 <__malloc_unlock>
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d908      	bls.n	80045fe <_free_r+0x46>
 80045ec:	6825      	ldr	r5, [r4, #0]
 80045ee:	1961      	adds	r1, r4, r5
 80045f0:	428b      	cmp	r3, r1
 80045f2:	bf01      	itttt	eq
 80045f4:	6819      	ldreq	r1, [r3, #0]
 80045f6:	685b      	ldreq	r3, [r3, #4]
 80045f8:	1949      	addeq	r1, r1, r5
 80045fa:	6021      	streq	r1, [r4, #0]
 80045fc:	e7ed      	b.n	80045da <_free_r+0x22>
 80045fe:	461a      	mov	r2, r3
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	b10b      	cbz	r3, 8004608 <_free_r+0x50>
 8004604:	42a3      	cmp	r3, r4
 8004606:	d9fa      	bls.n	80045fe <_free_r+0x46>
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	1855      	adds	r5, r2, r1
 800460c:	42a5      	cmp	r5, r4
 800460e:	d10b      	bne.n	8004628 <_free_r+0x70>
 8004610:	6824      	ldr	r4, [r4, #0]
 8004612:	4421      	add	r1, r4
 8004614:	1854      	adds	r4, r2, r1
 8004616:	42a3      	cmp	r3, r4
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	d1e0      	bne.n	80045de <_free_r+0x26>
 800461c:	681c      	ldr	r4, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	6053      	str	r3, [r2, #4]
 8004622:	4421      	add	r1, r4
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	e7da      	b.n	80045de <_free_r+0x26>
 8004628:	d902      	bls.n	8004630 <_free_r+0x78>
 800462a:	230c      	movs	r3, #12
 800462c:	6003      	str	r3, [r0, #0]
 800462e:	e7d6      	b.n	80045de <_free_r+0x26>
 8004630:	6825      	ldr	r5, [r4, #0]
 8004632:	1961      	adds	r1, r4, r5
 8004634:	428b      	cmp	r3, r1
 8004636:	bf04      	itt	eq
 8004638:	6819      	ldreq	r1, [r3, #0]
 800463a:	685b      	ldreq	r3, [r3, #4]
 800463c:	6063      	str	r3, [r4, #4]
 800463e:	bf04      	itt	eq
 8004640:	1949      	addeq	r1, r1, r5
 8004642:	6021      	streq	r1, [r4, #0]
 8004644:	6054      	str	r4, [r2, #4]
 8004646:	e7ca      	b.n	80045de <_free_r+0x26>
 8004648:	b003      	add	sp, #12
 800464a:	bd30      	pop	{r4, r5, pc}
 800464c:	20000170 	.word	0x20000170

08004650 <sbrk_aligned>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4e0e      	ldr	r6, [pc, #56]	; (800468c <sbrk_aligned+0x3c>)
 8004654:	460c      	mov	r4, r1
 8004656:	6831      	ldr	r1, [r6, #0]
 8004658:	4605      	mov	r5, r0
 800465a:	b911      	cbnz	r1, 8004662 <sbrk_aligned+0x12>
 800465c:	f000 fb7c 	bl	8004d58 <_sbrk_r>
 8004660:	6030      	str	r0, [r6, #0]
 8004662:	4621      	mov	r1, r4
 8004664:	4628      	mov	r0, r5
 8004666:	f000 fb77 	bl	8004d58 <_sbrk_r>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	d00a      	beq.n	8004684 <sbrk_aligned+0x34>
 800466e:	1cc4      	adds	r4, r0, #3
 8004670:	f024 0403 	bic.w	r4, r4, #3
 8004674:	42a0      	cmp	r0, r4
 8004676:	d007      	beq.n	8004688 <sbrk_aligned+0x38>
 8004678:	1a21      	subs	r1, r4, r0
 800467a:	4628      	mov	r0, r5
 800467c:	f000 fb6c 	bl	8004d58 <_sbrk_r>
 8004680:	3001      	adds	r0, #1
 8004682:	d101      	bne.n	8004688 <sbrk_aligned+0x38>
 8004684:	f04f 34ff 	mov.w	r4, #4294967295
 8004688:	4620      	mov	r0, r4
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	20000174 	.word	0x20000174

08004690 <_malloc_r>:
 8004690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004694:	1ccd      	adds	r5, r1, #3
 8004696:	f025 0503 	bic.w	r5, r5, #3
 800469a:	3508      	adds	r5, #8
 800469c:	2d0c      	cmp	r5, #12
 800469e:	bf38      	it	cc
 80046a0:	250c      	movcc	r5, #12
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	4607      	mov	r7, r0
 80046a6:	db01      	blt.n	80046ac <_malloc_r+0x1c>
 80046a8:	42a9      	cmp	r1, r5
 80046aa:	d905      	bls.n	80046b8 <_malloc_r+0x28>
 80046ac:	230c      	movs	r3, #12
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	2600      	movs	r6, #0
 80046b2:	4630      	mov	r0, r6
 80046b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b8:	4e2e      	ldr	r6, [pc, #184]	; (8004774 <_malloc_r+0xe4>)
 80046ba:	f000 fc1f 	bl	8004efc <__malloc_lock>
 80046be:	6833      	ldr	r3, [r6, #0]
 80046c0:	461c      	mov	r4, r3
 80046c2:	bb34      	cbnz	r4, 8004712 <_malloc_r+0x82>
 80046c4:	4629      	mov	r1, r5
 80046c6:	4638      	mov	r0, r7
 80046c8:	f7ff ffc2 	bl	8004650 <sbrk_aligned>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	4604      	mov	r4, r0
 80046d0:	d14d      	bne.n	800476e <_malloc_r+0xde>
 80046d2:	6834      	ldr	r4, [r6, #0]
 80046d4:	4626      	mov	r6, r4
 80046d6:	2e00      	cmp	r6, #0
 80046d8:	d140      	bne.n	800475c <_malloc_r+0xcc>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	4631      	mov	r1, r6
 80046de:	4638      	mov	r0, r7
 80046e0:	eb04 0803 	add.w	r8, r4, r3
 80046e4:	f000 fb38 	bl	8004d58 <_sbrk_r>
 80046e8:	4580      	cmp	r8, r0
 80046ea:	d13a      	bne.n	8004762 <_malloc_r+0xd2>
 80046ec:	6821      	ldr	r1, [r4, #0]
 80046ee:	3503      	adds	r5, #3
 80046f0:	1a6d      	subs	r5, r5, r1
 80046f2:	f025 0503 	bic.w	r5, r5, #3
 80046f6:	3508      	adds	r5, #8
 80046f8:	2d0c      	cmp	r5, #12
 80046fa:	bf38      	it	cc
 80046fc:	250c      	movcc	r5, #12
 80046fe:	4629      	mov	r1, r5
 8004700:	4638      	mov	r0, r7
 8004702:	f7ff ffa5 	bl	8004650 <sbrk_aligned>
 8004706:	3001      	adds	r0, #1
 8004708:	d02b      	beq.n	8004762 <_malloc_r+0xd2>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	442b      	add	r3, r5
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	e00e      	b.n	8004730 <_malloc_r+0xa0>
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	1b52      	subs	r2, r2, r5
 8004716:	d41e      	bmi.n	8004756 <_malloc_r+0xc6>
 8004718:	2a0b      	cmp	r2, #11
 800471a:	d916      	bls.n	800474a <_malloc_r+0xba>
 800471c:	1961      	adds	r1, r4, r5
 800471e:	42a3      	cmp	r3, r4
 8004720:	6025      	str	r5, [r4, #0]
 8004722:	bf18      	it	ne
 8004724:	6059      	strne	r1, [r3, #4]
 8004726:	6863      	ldr	r3, [r4, #4]
 8004728:	bf08      	it	eq
 800472a:	6031      	streq	r1, [r6, #0]
 800472c:	5162      	str	r2, [r4, r5]
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	4638      	mov	r0, r7
 8004732:	f104 060b 	add.w	r6, r4, #11
 8004736:	f000 fbe7 	bl	8004f08 <__malloc_unlock>
 800473a:	f026 0607 	bic.w	r6, r6, #7
 800473e:	1d23      	adds	r3, r4, #4
 8004740:	1af2      	subs	r2, r6, r3
 8004742:	d0b6      	beq.n	80046b2 <_malloc_r+0x22>
 8004744:	1b9b      	subs	r3, r3, r6
 8004746:	50a3      	str	r3, [r4, r2]
 8004748:	e7b3      	b.n	80046b2 <_malloc_r+0x22>
 800474a:	6862      	ldr	r2, [r4, #4]
 800474c:	42a3      	cmp	r3, r4
 800474e:	bf0c      	ite	eq
 8004750:	6032      	streq	r2, [r6, #0]
 8004752:	605a      	strne	r2, [r3, #4]
 8004754:	e7ec      	b.n	8004730 <_malloc_r+0xa0>
 8004756:	4623      	mov	r3, r4
 8004758:	6864      	ldr	r4, [r4, #4]
 800475a:	e7b2      	b.n	80046c2 <_malloc_r+0x32>
 800475c:	4634      	mov	r4, r6
 800475e:	6876      	ldr	r6, [r6, #4]
 8004760:	e7b9      	b.n	80046d6 <_malloc_r+0x46>
 8004762:	230c      	movs	r3, #12
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4638      	mov	r0, r7
 8004768:	f000 fbce 	bl	8004f08 <__malloc_unlock>
 800476c:	e7a1      	b.n	80046b2 <_malloc_r+0x22>
 800476e:	6025      	str	r5, [r4, #0]
 8004770:	e7de      	b.n	8004730 <_malloc_r+0xa0>
 8004772:	bf00      	nop
 8004774:	20000170 	.word	0x20000170

08004778 <__ssputs_r>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	688e      	ldr	r6, [r1, #8]
 800477e:	429e      	cmp	r6, r3
 8004780:	4682      	mov	sl, r0
 8004782:	460c      	mov	r4, r1
 8004784:	4690      	mov	r8, r2
 8004786:	461f      	mov	r7, r3
 8004788:	d838      	bhi.n	80047fc <__ssputs_r+0x84>
 800478a:	898a      	ldrh	r2, [r1, #12]
 800478c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004790:	d032      	beq.n	80047f8 <__ssputs_r+0x80>
 8004792:	6825      	ldr	r5, [r4, #0]
 8004794:	6909      	ldr	r1, [r1, #16]
 8004796:	eba5 0901 	sub.w	r9, r5, r1
 800479a:	6965      	ldr	r5, [r4, #20]
 800479c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047a4:	3301      	adds	r3, #1
 80047a6:	444b      	add	r3, r9
 80047a8:	106d      	asrs	r5, r5, #1
 80047aa:	429d      	cmp	r5, r3
 80047ac:	bf38      	it	cc
 80047ae:	461d      	movcc	r5, r3
 80047b0:	0553      	lsls	r3, r2, #21
 80047b2:	d531      	bpl.n	8004818 <__ssputs_r+0xa0>
 80047b4:	4629      	mov	r1, r5
 80047b6:	f7ff ff6b 	bl	8004690 <_malloc_r>
 80047ba:	4606      	mov	r6, r0
 80047bc:	b950      	cbnz	r0, 80047d4 <__ssputs_r+0x5c>
 80047be:	230c      	movs	r3, #12
 80047c0:	f8ca 3000 	str.w	r3, [sl]
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ca:	81a3      	strh	r3, [r4, #12]
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d4:	6921      	ldr	r1, [r4, #16]
 80047d6:	464a      	mov	r2, r9
 80047d8:	f000 fb68 	bl	8004eac <memcpy>
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	6126      	str	r6, [r4, #16]
 80047ea:	6165      	str	r5, [r4, #20]
 80047ec:	444e      	add	r6, r9
 80047ee:	eba5 0509 	sub.w	r5, r5, r9
 80047f2:	6026      	str	r6, [r4, #0]
 80047f4:	60a5      	str	r5, [r4, #8]
 80047f6:	463e      	mov	r6, r7
 80047f8:	42be      	cmp	r6, r7
 80047fa:	d900      	bls.n	80047fe <__ssputs_r+0x86>
 80047fc:	463e      	mov	r6, r7
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	4632      	mov	r2, r6
 8004802:	4641      	mov	r1, r8
 8004804:	f000 fb60 	bl	8004ec8 <memmove>
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	1b9b      	subs	r3, r3, r6
 800480c:	60a3      	str	r3, [r4, #8]
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	4433      	add	r3, r6
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	2000      	movs	r0, #0
 8004816:	e7db      	b.n	80047d0 <__ssputs_r+0x58>
 8004818:	462a      	mov	r2, r5
 800481a:	f000 fb7b 	bl	8004f14 <_realloc_r>
 800481e:	4606      	mov	r6, r0
 8004820:	2800      	cmp	r0, #0
 8004822:	d1e1      	bne.n	80047e8 <__ssputs_r+0x70>
 8004824:	6921      	ldr	r1, [r4, #16]
 8004826:	4650      	mov	r0, sl
 8004828:	f7ff fec6 	bl	80045b8 <_free_r>
 800482c:	e7c7      	b.n	80047be <__ssputs_r+0x46>
	...

08004830 <_svfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	4698      	mov	r8, r3
 8004836:	898b      	ldrh	r3, [r1, #12]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	b09d      	sub	sp, #116	; 0x74
 800483c:	4607      	mov	r7, r0
 800483e:	460d      	mov	r5, r1
 8004840:	4614      	mov	r4, r2
 8004842:	d50e      	bpl.n	8004862 <_svfiprintf_r+0x32>
 8004844:	690b      	ldr	r3, [r1, #16]
 8004846:	b963      	cbnz	r3, 8004862 <_svfiprintf_r+0x32>
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	f7ff ff21 	bl	8004690 <_malloc_r>
 800484e:	6028      	str	r0, [r5, #0]
 8004850:	6128      	str	r0, [r5, #16]
 8004852:	b920      	cbnz	r0, 800485e <_svfiprintf_r+0x2e>
 8004854:	230c      	movs	r3, #12
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	f04f 30ff 	mov.w	r0, #4294967295
 800485c:	e0d1      	b.n	8004a02 <_svfiprintf_r+0x1d2>
 800485e:	2340      	movs	r3, #64	; 0x40
 8004860:	616b      	str	r3, [r5, #20]
 8004862:	2300      	movs	r3, #0
 8004864:	9309      	str	r3, [sp, #36]	; 0x24
 8004866:	2320      	movs	r3, #32
 8004868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800486c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004870:	2330      	movs	r3, #48	; 0x30
 8004872:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a1c <_svfiprintf_r+0x1ec>
 8004876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800487a:	f04f 0901 	mov.w	r9, #1
 800487e:	4623      	mov	r3, r4
 8004880:	469a      	mov	sl, r3
 8004882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004886:	b10a      	cbz	r2, 800488c <_svfiprintf_r+0x5c>
 8004888:	2a25      	cmp	r2, #37	; 0x25
 800488a:	d1f9      	bne.n	8004880 <_svfiprintf_r+0x50>
 800488c:	ebba 0b04 	subs.w	fp, sl, r4
 8004890:	d00b      	beq.n	80048aa <_svfiprintf_r+0x7a>
 8004892:	465b      	mov	r3, fp
 8004894:	4622      	mov	r2, r4
 8004896:	4629      	mov	r1, r5
 8004898:	4638      	mov	r0, r7
 800489a:	f7ff ff6d 	bl	8004778 <__ssputs_r>
 800489e:	3001      	adds	r0, #1
 80048a0:	f000 80aa 	beq.w	80049f8 <_svfiprintf_r+0x1c8>
 80048a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a6:	445a      	add	r2, fp
 80048a8:	9209      	str	r2, [sp, #36]	; 0x24
 80048aa:	f89a 3000 	ldrb.w	r3, [sl]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a2 	beq.w	80049f8 <_svfiprintf_r+0x1c8>
 80048b4:	2300      	movs	r3, #0
 80048b6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048be:	f10a 0a01 	add.w	sl, sl, #1
 80048c2:	9304      	str	r3, [sp, #16]
 80048c4:	9307      	str	r3, [sp, #28]
 80048c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048ca:	931a      	str	r3, [sp, #104]	; 0x68
 80048cc:	4654      	mov	r4, sl
 80048ce:	2205      	movs	r2, #5
 80048d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d4:	4851      	ldr	r0, [pc, #324]	; (8004a1c <_svfiprintf_r+0x1ec>)
 80048d6:	f7fb fc83 	bl	80001e0 <memchr>
 80048da:	9a04      	ldr	r2, [sp, #16]
 80048dc:	b9d8      	cbnz	r0, 8004916 <_svfiprintf_r+0xe6>
 80048de:	06d0      	lsls	r0, r2, #27
 80048e0:	bf44      	itt	mi
 80048e2:	2320      	movmi	r3, #32
 80048e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e8:	0711      	lsls	r1, r2, #28
 80048ea:	bf44      	itt	mi
 80048ec:	232b      	movmi	r3, #43	; 0x2b
 80048ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f2:	f89a 3000 	ldrb.w	r3, [sl]
 80048f6:	2b2a      	cmp	r3, #42	; 0x2a
 80048f8:	d015      	beq.n	8004926 <_svfiprintf_r+0xf6>
 80048fa:	9a07      	ldr	r2, [sp, #28]
 80048fc:	4654      	mov	r4, sl
 80048fe:	2000      	movs	r0, #0
 8004900:	f04f 0c0a 	mov.w	ip, #10
 8004904:	4621      	mov	r1, r4
 8004906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800490a:	3b30      	subs	r3, #48	; 0x30
 800490c:	2b09      	cmp	r3, #9
 800490e:	d94e      	bls.n	80049ae <_svfiprintf_r+0x17e>
 8004910:	b1b0      	cbz	r0, 8004940 <_svfiprintf_r+0x110>
 8004912:	9207      	str	r2, [sp, #28]
 8004914:	e014      	b.n	8004940 <_svfiprintf_r+0x110>
 8004916:	eba0 0308 	sub.w	r3, r0, r8
 800491a:	fa09 f303 	lsl.w	r3, r9, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	9304      	str	r3, [sp, #16]
 8004922:	46a2      	mov	sl, r4
 8004924:	e7d2      	b.n	80048cc <_svfiprintf_r+0x9c>
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	1d19      	adds	r1, r3, #4
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	9103      	str	r1, [sp, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	bfbb      	ittet	lt
 8004932:	425b      	neglt	r3, r3
 8004934:	f042 0202 	orrlt.w	r2, r2, #2
 8004938:	9307      	strge	r3, [sp, #28]
 800493a:	9307      	strlt	r3, [sp, #28]
 800493c:	bfb8      	it	lt
 800493e:	9204      	strlt	r2, [sp, #16]
 8004940:	7823      	ldrb	r3, [r4, #0]
 8004942:	2b2e      	cmp	r3, #46	; 0x2e
 8004944:	d10c      	bne.n	8004960 <_svfiprintf_r+0x130>
 8004946:	7863      	ldrb	r3, [r4, #1]
 8004948:	2b2a      	cmp	r3, #42	; 0x2a
 800494a:	d135      	bne.n	80049b8 <_svfiprintf_r+0x188>
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	9203      	str	r2, [sp, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfb8      	it	lt
 8004958:	f04f 33ff 	movlt.w	r3, #4294967295
 800495c:	3402      	adds	r4, #2
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a2c <_svfiprintf_r+0x1fc>
 8004964:	7821      	ldrb	r1, [r4, #0]
 8004966:	2203      	movs	r2, #3
 8004968:	4650      	mov	r0, sl
 800496a:	f7fb fc39 	bl	80001e0 <memchr>
 800496e:	b140      	cbz	r0, 8004982 <_svfiprintf_r+0x152>
 8004970:	2340      	movs	r3, #64	; 0x40
 8004972:	eba0 000a 	sub.w	r0, r0, sl
 8004976:	fa03 f000 	lsl.w	r0, r3, r0
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	4303      	orrs	r3, r0
 800497e:	3401      	adds	r4, #1
 8004980:	9304      	str	r3, [sp, #16]
 8004982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004986:	4826      	ldr	r0, [pc, #152]	; (8004a20 <_svfiprintf_r+0x1f0>)
 8004988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800498c:	2206      	movs	r2, #6
 800498e:	f7fb fc27 	bl	80001e0 <memchr>
 8004992:	2800      	cmp	r0, #0
 8004994:	d038      	beq.n	8004a08 <_svfiprintf_r+0x1d8>
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <_svfiprintf_r+0x1f4>)
 8004998:	bb1b      	cbnz	r3, 80049e2 <_svfiprintf_r+0x1b2>
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	3307      	adds	r3, #7
 800499e:	f023 0307 	bic.w	r3, r3, #7
 80049a2:	3308      	adds	r3, #8
 80049a4:	9303      	str	r3, [sp, #12]
 80049a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a8:	4433      	add	r3, r6
 80049aa:	9309      	str	r3, [sp, #36]	; 0x24
 80049ac:	e767      	b.n	800487e <_svfiprintf_r+0x4e>
 80049ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b2:	460c      	mov	r4, r1
 80049b4:	2001      	movs	r0, #1
 80049b6:	e7a5      	b.n	8004904 <_svfiprintf_r+0xd4>
 80049b8:	2300      	movs	r3, #0
 80049ba:	3401      	adds	r4, #1
 80049bc:	9305      	str	r3, [sp, #20]
 80049be:	4619      	mov	r1, r3
 80049c0:	f04f 0c0a 	mov.w	ip, #10
 80049c4:	4620      	mov	r0, r4
 80049c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ca:	3a30      	subs	r2, #48	; 0x30
 80049cc:	2a09      	cmp	r2, #9
 80049ce:	d903      	bls.n	80049d8 <_svfiprintf_r+0x1a8>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0c5      	beq.n	8004960 <_svfiprintf_r+0x130>
 80049d4:	9105      	str	r1, [sp, #20]
 80049d6:	e7c3      	b.n	8004960 <_svfiprintf_r+0x130>
 80049d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049dc:	4604      	mov	r4, r0
 80049de:	2301      	movs	r3, #1
 80049e0:	e7f0      	b.n	80049c4 <_svfiprintf_r+0x194>
 80049e2:	ab03      	add	r3, sp, #12
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	462a      	mov	r2, r5
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <_svfiprintf_r+0x1f8>)
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	4638      	mov	r0, r7
 80049ee:	f3af 8000 	nop.w
 80049f2:	1c42      	adds	r2, r0, #1
 80049f4:	4606      	mov	r6, r0
 80049f6:	d1d6      	bne.n	80049a6 <_svfiprintf_r+0x176>
 80049f8:	89ab      	ldrh	r3, [r5, #12]
 80049fa:	065b      	lsls	r3, r3, #25
 80049fc:	f53f af2c 	bmi.w	8004858 <_svfiprintf_r+0x28>
 8004a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a02:	b01d      	add	sp, #116	; 0x74
 8004a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a08:	ab03      	add	r3, sp, #12
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <_svfiprintf_r+0x1f8>)
 8004a10:	a904      	add	r1, sp, #16
 8004a12:	4638      	mov	r0, r7
 8004a14:	f000 f87a 	bl	8004b0c <_printf_i>
 8004a18:	e7eb      	b.n	80049f2 <_svfiprintf_r+0x1c2>
 8004a1a:	bf00      	nop
 8004a1c:	080050ec 	.word	0x080050ec
 8004a20:	080050f6 	.word	0x080050f6
 8004a24:	00000000 	.word	0x00000000
 8004a28:	08004779 	.word	0x08004779
 8004a2c:	080050f2 	.word	0x080050f2

08004a30 <_printf_common>:
 8004a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	4616      	mov	r6, r2
 8004a36:	4699      	mov	r9, r3
 8004a38:	688a      	ldr	r2, [r1, #8]
 8004a3a:	690b      	ldr	r3, [r1, #16]
 8004a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	bfb8      	it	lt
 8004a44:	4613      	movlt	r3, r2
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	b10a      	cbz	r2, 8004a56 <_printf_common+0x26>
 8004a52:	3301      	adds	r3, #1
 8004a54:	6033      	str	r3, [r6, #0]
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	0699      	lsls	r1, r3, #26
 8004a5a:	bf42      	ittt	mi
 8004a5c:	6833      	ldrmi	r3, [r6, #0]
 8004a5e:	3302      	addmi	r3, #2
 8004a60:	6033      	strmi	r3, [r6, #0]
 8004a62:	6825      	ldr	r5, [r4, #0]
 8004a64:	f015 0506 	ands.w	r5, r5, #6
 8004a68:	d106      	bne.n	8004a78 <_printf_common+0x48>
 8004a6a:	f104 0a19 	add.w	sl, r4, #25
 8004a6e:	68e3      	ldr	r3, [r4, #12]
 8004a70:	6832      	ldr	r2, [r6, #0]
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	42ab      	cmp	r3, r5
 8004a76:	dc26      	bgt.n	8004ac6 <_printf_common+0x96>
 8004a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a7c:	1e13      	subs	r3, r2, #0
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	bf18      	it	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	0692      	lsls	r2, r2, #26
 8004a86:	d42b      	bmi.n	8004ae0 <_printf_common+0xb0>
 8004a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c0      	blx	r8
 8004a92:	3001      	adds	r0, #1
 8004a94:	d01e      	beq.n	8004ad4 <_printf_common+0xa4>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	68e5      	ldr	r5, [r4, #12]
 8004a9a:	6832      	ldr	r2, [r6, #0]
 8004a9c:	f003 0306 	and.w	r3, r3, #6
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	bf08      	it	eq
 8004aa4:	1aad      	subeq	r5, r5, r2
 8004aa6:	68a3      	ldr	r3, [r4, #8]
 8004aa8:	6922      	ldr	r2, [r4, #16]
 8004aaa:	bf0c      	ite	eq
 8004aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab0:	2500      	movne	r5, #0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bfc4      	itt	gt
 8004ab6:	1a9b      	subgt	r3, r3, r2
 8004ab8:	18ed      	addgt	r5, r5, r3
 8004aba:	2600      	movs	r6, #0
 8004abc:	341a      	adds	r4, #26
 8004abe:	42b5      	cmp	r5, r6
 8004ac0:	d11a      	bne.n	8004af8 <_printf_common+0xc8>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	e008      	b.n	8004ad8 <_printf_common+0xa8>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4652      	mov	r2, sl
 8004aca:	4649      	mov	r1, r9
 8004acc:	4638      	mov	r0, r7
 8004ace:	47c0      	blx	r8
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	d103      	bne.n	8004adc <_printf_common+0xac>
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7c6      	b.n	8004a6e <_printf_common+0x3e>
 8004ae0:	18e1      	adds	r1, r4, r3
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	2030      	movs	r0, #48	; 0x30
 8004ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aea:	4422      	add	r2, r4
 8004aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004af4:	3302      	adds	r3, #2
 8004af6:	e7c7      	b.n	8004a88 <_printf_common+0x58>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4622      	mov	r2, r4
 8004afc:	4649      	mov	r1, r9
 8004afe:	4638      	mov	r0, r7
 8004b00:	47c0      	blx	r8
 8004b02:	3001      	adds	r0, #1
 8004b04:	d0e6      	beq.n	8004ad4 <_printf_common+0xa4>
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7d9      	b.n	8004abe <_printf_common+0x8e>
	...

08004b0c <_printf_i>:
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	7e0f      	ldrb	r7, [r1, #24]
 8004b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b14:	2f78      	cmp	r7, #120	; 0x78
 8004b16:	4691      	mov	r9, r2
 8004b18:	4680      	mov	r8, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	469a      	mov	sl, r3
 8004b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b22:	d807      	bhi.n	8004b34 <_printf_i+0x28>
 8004b24:	2f62      	cmp	r7, #98	; 0x62
 8004b26:	d80a      	bhi.n	8004b3e <_printf_i+0x32>
 8004b28:	2f00      	cmp	r7, #0
 8004b2a:	f000 80d8 	beq.w	8004cde <_printf_i+0x1d2>
 8004b2e:	2f58      	cmp	r7, #88	; 0x58
 8004b30:	f000 80a3 	beq.w	8004c7a <_printf_i+0x16e>
 8004b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b3c:	e03a      	b.n	8004bb4 <_printf_i+0xa8>
 8004b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b42:	2b15      	cmp	r3, #21
 8004b44:	d8f6      	bhi.n	8004b34 <_printf_i+0x28>
 8004b46:	a101      	add	r1, pc, #4	; (adr r1, 8004b4c <_printf_i+0x40>)
 8004b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b4c:	08004ba5 	.word	0x08004ba5
 8004b50:	08004bb9 	.word	0x08004bb9
 8004b54:	08004b35 	.word	0x08004b35
 8004b58:	08004b35 	.word	0x08004b35
 8004b5c:	08004b35 	.word	0x08004b35
 8004b60:	08004b35 	.word	0x08004b35
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004b35 	.word	0x08004b35
 8004b6c:	08004b35 	.word	0x08004b35
 8004b70:	08004b35 	.word	0x08004b35
 8004b74:	08004b35 	.word	0x08004b35
 8004b78:	08004cc5 	.word	0x08004cc5
 8004b7c:	08004be9 	.word	0x08004be9
 8004b80:	08004ca7 	.word	0x08004ca7
 8004b84:	08004b35 	.word	0x08004b35
 8004b88:	08004b35 	.word	0x08004b35
 8004b8c:	08004ce7 	.word	0x08004ce7
 8004b90:	08004b35 	.word	0x08004b35
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b35 	.word	0x08004b35
 8004b9c:	08004b35 	.word	0x08004b35
 8004ba0:	08004caf 	.word	0x08004caf
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	602a      	str	r2, [r5, #0]
 8004bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0a3      	b.n	8004d00 <_printf_i+0x1f4>
 8004bb8:	6820      	ldr	r0, [r4, #0]
 8004bba:	6829      	ldr	r1, [r5, #0]
 8004bbc:	0606      	lsls	r6, r0, #24
 8004bbe:	f101 0304 	add.w	r3, r1, #4
 8004bc2:	d50a      	bpl.n	8004bda <_printf_i+0xce>
 8004bc4:	680e      	ldr	r6, [r1, #0]
 8004bc6:	602b      	str	r3, [r5, #0]
 8004bc8:	2e00      	cmp	r6, #0
 8004bca:	da03      	bge.n	8004bd4 <_printf_i+0xc8>
 8004bcc:	232d      	movs	r3, #45	; 0x2d
 8004bce:	4276      	negs	r6, r6
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd4:	485e      	ldr	r0, [pc, #376]	; (8004d50 <_printf_i+0x244>)
 8004bd6:	230a      	movs	r3, #10
 8004bd8:	e019      	b.n	8004c0e <_printf_i+0x102>
 8004bda:	680e      	ldr	r6, [r1, #0]
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004be2:	bf18      	it	ne
 8004be4:	b236      	sxthne	r6, r6
 8004be6:	e7ef      	b.n	8004bc8 <_printf_i+0xbc>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	6820      	ldr	r0, [r4, #0]
 8004bec:	1d19      	adds	r1, r3, #4
 8004bee:	6029      	str	r1, [r5, #0]
 8004bf0:	0601      	lsls	r1, r0, #24
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_i+0xec>
 8004bf4:	681e      	ldr	r6, [r3, #0]
 8004bf6:	e002      	b.n	8004bfe <_printf_i+0xf2>
 8004bf8:	0646      	lsls	r6, r0, #25
 8004bfa:	d5fb      	bpl.n	8004bf4 <_printf_i+0xe8>
 8004bfc:	881e      	ldrh	r6, [r3, #0]
 8004bfe:	4854      	ldr	r0, [pc, #336]	; (8004d50 <_printf_i+0x244>)
 8004c00:	2f6f      	cmp	r7, #111	; 0x6f
 8004c02:	bf0c      	ite	eq
 8004c04:	2308      	moveq	r3, #8
 8004c06:	230a      	movne	r3, #10
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0e:	6865      	ldr	r5, [r4, #4]
 8004c10:	60a5      	str	r5, [r4, #8]
 8004c12:	2d00      	cmp	r5, #0
 8004c14:	bfa2      	ittt	ge
 8004c16:	6821      	ldrge	r1, [r4, #0]
 8004c18:	f021 0104 	bicge.w	r1, r1, #4
 8004c1c:	6021      	strge	r1, [r4, #0]
 8004c1e:	b90e      	cbnz	r6, 8004c24 <_printf_i+0x118>
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	d04d      	beq.n	8004cc0 <_printf_i+0x1b4>
 8004c24:	4615      	mov	r5, r2
 8004c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c2e:	5dc7      	ldrb	r7, [r0, r7]
 8004c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c34:	4637      	mov	r7, r6
 8004c36:	42bb      	cmp	r3, r7
 8004c38:	460e      	mov	r6, r1
 8004c3a:	d9f4      	bls.n	8004c26 <_printf_i+0x11a>
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d10b      	bne.n	8004c58 <_printf_i+0x14c>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	07de      	lsls	r6, r3, #31
 8004c44:	d508      	bpl.n	8004c58 <_printf_i+0x14c>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	6861      	ldr	r1, [r4, #4]
 8004c4a:	4299      	cmp	r1, r3
 8004c4c:	bfde      	ittt	le
 8004c4e:	2330      	movle	r3, #48	; 0x30
 8004c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c58:	1b52      	subs	r2, r2, r5
 8004c5a:	6122      	str	r2, [r4, #16]
 8004c5c:	f8cd a000 	str.w	sl, [sp]
 8004c60:	464b      	mov	r3, r9
 8004c62:	aa03      	add	r2, sp, #12
 8004c64:	4621      	mov	r1, r4
 8004c66:	4640      	mov	r0, r8
 8004c68:	f7ff fee2 	bl	8004a30 <_printf_common>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d14c      	bne.n	8004d0a <_printf_i+0x1fe>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	b004      	add	sp, #16
 8004c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7a:	4835      	ldr	r0, [pc, #212]	; (8004d50 <_printf_i+0x244>)
 8004c7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c80:	6829      	ldr	r1, [r5, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c88:	6029      	str	r1, [r5, #0]
 8004c8a:	061d      	lsls	r5, r3, #24
 8004c8c:	d514      	bpl.n	8004cb8 <_printf_i+0x1ac>
 8004c8e:	07df      	lsls	r7, r3, #31
 8004c90:	bf44      	itt	mi
 8004c92:	f043 0320 	orrmi.w	r3, r3, #32
 8004c96:	6023      	strmi	r3, [r4, #0]
 8004c98:	b91e      	cbnz	r6, 8004ca2 <_printf_i+0x196>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f023 0320 	bic.w	r3, r3, #32
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	e7b0      	b.n	8004c08 <_printf_i+0xfc>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	f043 0320 	orr.w	r3, r3, #32
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	2378      	movs	r3, #120	; 0x78
 8004cb0:	4828      	ldr	r0, [pc, #160]	; (8004d54 <_printf_i+0x248>)
 8004cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cb6:	e7e3      	b.n	8004c80 <_printf_i+0x174>
 8004cb8:	0659      	lsls	r1, r3, #25
 8004cba:	bf48      	it	mi
 8004cbc:	b2b6      	uxthmi	r6, r6
 8004cbe:	e7e6      	b.n	8004c8e <_printf_i+0x182>
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	e7bb      	b.n	8004c3c <_printf_i+0x130>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6826      	ldr	r6, [r4, #0]
 8004cc8:	6961      	ldr	r1, [r4, #20]
 8004cca:	1d18      	adds	r0, r3, #4
 8004ccc:	6028      	str	r0, [r5, #0]
 8004cce:	0635      	lsls	r5, r6, #24
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	d501      	bpl.n	8004cd8 <_printf_i+0x1cc>
 8004cd4:	6019      	str	r1, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <_printf_i+0x1d2>
 8004cd8:	0670      	lsls	r0, r6, #25
 8004cda:	d5fb      	bpl.n	8004cd4 <_printf_i+0x1c8>
 8004cdc:	8019      	strh	r1, [r3, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	e7ba      	b.n	8004c5c <_printf_i+0x150>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	602a      	str	r2, [r5, #0]
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	6862      	ldr	r2, [r4, #4]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7fb fa74 	bl	80001e0 <memchr>
 8004cf8:	b108      	cbz	r0, 8004cfe <_printf_i+0x1f2>
 8004cfa:	1b40      	subs	r0, r0, r5
 8004cfc:	6060      	str	r0, [r4, #4]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	2300      	movs	r3, #0
 8004d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d08:	e7a8      	b.n	8004c5c <_printf_i+0x150>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4640      	mov	r0, r8
 8004d12:	47d0      	blx	sl
 8004d14:	3001      	adds	r0, #1
 8004d16:	d0ab      	beq.n	8004c70 <_printf_i+0x164>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	079b      	lsls	r3, r3, #30
 8004d1c:	d413      	bmi.n	8004d46 <_printf_i+0x23a>
 8004d1e:	68e0      	ldr	r0, [r4, #12]
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	4298      	cmp	r0, r3
 8004d24:	bfb8      	it	lt
 8004d26:	4618      	movlt	r0, r3
 8004d28:	e7a4      	b.n	8004c74 <_printf_i+0x168>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d09b      	beq.n	8004c70 <_printf_i+0x164>
 8004d38:	3501      	adds	r5, #1
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	1a5b      	subs	r3, r3, r1
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dcf2      	bgt.n	8004d2a <_printf_i+0x21e>
 8004d44:	e7eb      	b.n	8004d1e <_printf_i+0x212>
 8004d46:	2500      	movs	r5, #0
 8004d48:	f104 0619 	add.w	r6, r4, #25
 8004d4c:	e7f5      	b.n	8004d3a <_printf_i+0x22e>
 8004d4e:	bf00      	nop
 8004d50:	080050fd 	.word	0x080050fd
 8004d54:	0800510e 	.word	0x0800510e

08004d58 <_sbrk_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	4d06      	ldr	r5, [pc, #24]	; (8004d74 <_sbrk_r+0x1c>)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	f7fc f800 	bl	8000d68 <_sbrk>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_sbrk_r+0x1a>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_sbrk_r+0x1a>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000178 	.word	0x20000178

08004d78 <__sread>:
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d80:	f000 f8f8 	bl	8004f74 <_read_r>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	bfab      	itete	ge
 8004d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d8c:	181b      	addge	r3, r3, r0
 8004d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d92:	bfac      	ite	ge
 8004d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d96:	81a3      	strhlt	r3, [r4, #12]
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <__swrite>:
 8004d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9e:	461f      	mov	r7, r3
 8004da0:	898b      	ldrh	r3, [r1, #12]
 8004da2:	05db      	lsls	r3, r3, #23
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4616      	mov	r6, r2
 8004daa:	d505      	bpl.n	8004db8 <__swrite+0x1e>
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	2302      	movs	r3, #2
 8004db2:	2200      	movs	r2, #0
 8004db4:	f000 f868 	bl	8004e88 <_lseek_r>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	f000 b817 	b.w	8004e00 <_write_r>

08004dd2 <__sseek>:
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dda:	f000 f855 	bl	8004e88 <_lseek_r>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	bf15      	itete	ne
 8004de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dee:	81a3      	strheq	r3, [r4, #12]
 8004df0:	bf18      	it	ne
 8004df2:	81a3      	strhne	r3, [r4, #12]
 8004df4:	bd10      	pop	{r4, pc}

08004df6 <__sclose>:
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 b813 	b.w	8004e24 <_close_r>
	...

08004e00 <_write_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d07      	ldr	r5, [pc, #28]	; (8004e20 <_write_r+0x20>)
 8004e04:	4604      	mov	r4, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	4611      	mov	r1, r2
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	602a      	str	r2, [r5, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7fb ff59 	bl	8000cc6 <_write>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_write_r+0x1e>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_write_r+0x1e>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000178 	.word	0x20000178

08004e24 <_close_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d06      	ldr	r5, [pc, #24]	; (8004e40 <_close_r+0x1c>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	f7fb ff65 	bl	8000cfe <_close>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_close_r+0x1a>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_close_r+0x1a>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000178 	.word	0x20000178

08004e44 <_fstat_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	; (8004e64 <_fstat_r+0x20>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	f7fb ff60 	bl	8000d16 <_fstat>
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	d102      	bne.n	8004e60 <_fstat_r+0x1c>
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	b103      	cbz	r3, 8004e60 <_fstat_r+0x1c>
 8004e5e:	6023      	str	r3, [r4, #0]
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	bf00      	nop
 8004e64:	20000178 	.word	0x20000178

08004e68 <_isatty_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	4d06      	ldr	r5, [pc, #24]	; (8004e84 <_isatty_r+0x1c>)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fb ff5f 	bl	8000d36 <_isatty>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_isatty_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_isatty_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	20000178 	.word	0x20000178

08004e88 <_lseek_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d07      	ldr	r5, [pc, #28]	; (8004ea8 <_lseek_r+0x20>)
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fb ff58 	bl	8000d4c <_lseek>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_lseek_r+0x1e>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_lseek_r+0x1e>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	20000178 	.word	0x20000178

08004eac <memcpy>:
 8004eac:	440a      	add	r2, r1
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eb4:	d100      	bne.n	8004eb8 <memcpy+0xc>
 8004eb6:	4770      	bx	lr
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ec2:	4291      	cmp	r1, r2
 8004ec4:	d1f9      	bne.n	8004eba <memcpy+0xe>
 8004ec6:	bd10      	pop	{r4, pc}

08004ec8 <memmove>:
 8004ec8:	4288      	cmp	r0, r1
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	eb01 0402 	add.w	r4, r1, r2
 8004ed0:	d902      	bls.n	8004ed8 <memmove+0x10>
 8004ed2:	4284      	cmp	r4, r0
 8004ed4:	4623      	mov	r3, r4
 8004ed6:	d807      	bhi.n	8004ee8 <memmove+0x20>
 8004ed8:	1e43      	subs	r3, r0, #1
 8004eda:	42a1      	cmp	r1, r4
 8004edc:	d008      	beq.n	8004ef0 <memmove+0x28>
 8004ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ee6:	e7f8      	b.n	8004eda <memmove+0x12>
 8004ee8:	4402      	add	r2, r0
 8004eea:	4601      	mov	r1, r0
 8004eec:	428a      	cmp	r2, r1
 8004eee:	d100      	bne.n	8004ef2 <memmove+0x2a>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004efa:	e7f7      	b.n	8004eec <memmove+0x24>

08004efc <__malloc_lock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_lock+0x8>)
 8004efe:	f7ff baf3 	b.w	80044e8 <__retarget_lock_acquire_recursive>
 8004f02:	bf00      	nop
 8004f04:	2000016c 	.word	0x2000016c

08004f08 <__malloc_unlock>:
 8004f08:	4801      	ldr	r0, [pc, #4]	; (8004f10 <__malloc_unlock+0x8>)
 8004f0a:	f7ff baee 	b.w	80044ea <__retarget_lock_release_recursive>
 8004f0e:	bf00      	nop
 8004f10:	2000016c 	.word	0x2000016c

08004f14 <_realloc_r>:
 8004f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f18:	4680      	mov	r8, r0
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	460e      	mov	r6, r1
 8004f1e:	b921      	cbnz	r1, 8004f2a <_realloc_r+0x16>
 8004f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f24:	4611      	mov	r1, r2
 8004f26:	f7ff bbb3 	b.w	8004690 <_malloc_r>
 8004f2a:	b92a      	cbnz	r2, 8004f38 <_realloc_r+0x24>
 8004f2c:	f7ff fb44 	bl	80045b8 <_free_r>
 8004f30:	4625      	mov	r5, r4
 8004f32:	4628      	mov	r0, r5
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f38:	f000 f82e 	bl	8004f98 <_malloc_usable_size_r>
 8004f3c:	4284      	cmp	r4, r0
 8004f3e:	4607      	mov	r7, r0
 8004f40:	d802      	bhi.n	8004f48 <_realloc_r+0x34>
 8004f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f46:	d812      	bhi.n	8004f6e <_realloc_r+0x5a>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7ff fba0 	bl	8004690 <_malloc_r>
 8004f50:	4605      	mov	r5, r0
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d0ed      	beq.n	8004f32 <_realloc_r+0x1e>
 8004f56:	42bc      	cmp	r4, r7
 8004f58:	4622      	mov	r2, r4
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	bf28      	it	cs
 8004f5e:	463a      	movcs	r2, r7
 8004f60:	f7ff ffa4 	bl	8004eac <memcpy>
 8004f64:	4631      	mov	r1, r6
 8004f66:	4640      	mov	r0, r8
 8004f68:	f7ff fb26 	bl	80045b8 <_free_r>
 8004f6c:	e7e1      	b.n	8004f32 <_realloc_r+0x1e>
 8004f6e:	4635      	mov	r5, r6
 8004f70:	e7df      	b.n	8004f32 <_realloc_r+0x1e>
	...

08004f74 <_read_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d07      	ldr	r5, [pc, #28]	; (8004f94 <_read_r+0x20>)
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fb fe82 	bl	8000c8c <_read>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_read_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_read_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000178 	.word	0x20000178

08004f98 <_malloc_usable_size_r>:
 8004f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9c:	1f18      	subs	r0, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfbc      	itt	lt
 8004fa2:	580b      	ldrlt	r3, [r1, r0]
 8004fa4:	18c0      	addlt	r0, r0, r3
 8004fa6:	4770      	bx	lr

08004fa8 <_init>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr

08004fb4 <_fini>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr
